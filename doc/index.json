[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/app.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Application entrypoint\n */\nimport express from 'express';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport {resolve} from 'path';\n/**\n * Dependencies : middlewares\n */\nimport bunyanLogger from 'express-bunyan-logger';\nimport debugStream from 'bunyan-debug-stream';\nimport {\n  //authenticateWithTokens,\n  errorHandler\n} from './utils/middlewares';\n/**\n * Dependencies : Components API\n */\nimport {api as compositions} from './components/compositions';\nimport {api as deliverables} from './components/deliverables';\nimport {api as diffusions} from './components/diffusions';\nimport {api as resources} from './components/resources';\nimport {api as montages} from './components/montages';\nimport {api as assets} from './components/assets';\nimport {api as users} from './components/users';\nimport {api as auth} from './components/auth';\n\nimport {router as html2img} from './services/html2img';\nimport {router as dataProvider} from './services/data-provider';\nimport {router as dumpProvider} from './services/dump';\n\n\n/**\n * Connect config\n */\nimport {\n  getConfig\n} from './utils/config';\nconst config = getConfig();\nconst {secret} = config;\n\n/**\n * Init express app\n */\nconst app = express();\n\n/**\n * Enhance the app with middlewares\n */\napp.use(bodyParser.urlencoded({ extended: true, limit: \"200Mo\" }));\napp.use(bodyParser.json()); // use json body parser except when uploading raw files\napp.use(cors());\napp.use(require('express-promise')());\napp.use(bunyanLogger({\n  name: \"log\",\n  streams: [{\n      level:  'info',\n      type:   'raw',\n      stream: debugStream({\n          basepath: __dirname, // this should be the root folder of your project.\n          forceColor: true\n      })\n  }],\n  serializers: debugStream.serializers\n}));\n\n/**\n * set secret variable for auth processes\n */\napp.set('superSecret', secret);\n\n/**\n * Set a route\n */\napp.get('/', (req, res) => {\n  res.send('This is an api. Connect to /api/:whatyouwant to get something.');\n});\n\nexport default app;\n\n/**\n * UNPROTECTED ROUTES\n */\n\n/**\n * Static asset files\n */\nconst assetsPath = resolve(`${__dirname}/../assets`);\napp.use('/assets', express.static(assetsPath));\n\n/**\n * Open data provider\n */\napp.use('/services/data-provider', dataProvider);\n\n\n/**\n * Create API router\n */\nconst apiRoutes = express.Router();\n\n/**\n * No-token authentication-related routes\n */\napiRoutes.use('/', auth);\n\n/**\n * API documentation route\n */\n\n/**\n * Apply authentication middleware for protected routes using jwt\n * (after that line all routes are protected)\n */\n// apiRoutes.use(authenticateWithTokens);\n/**\n * Protected api routes\n */\napiRoutes.use('/users', users);\napiRoutes.use('/assets', assets);\napiRoutes.use('/resources', resources);\napiRoutes.use('/compositions', compositions);\napiRoutes.use('/diffusions', diffusions);\napiRoutes.use('/montages', montages);\napiRoutes.use('/deliverables', deliverables);\n\n/**\n * Connect the api router to the app\n */\napp.use('/api', apiRoutes);\n\n/**\n * SERVICES router\n */\nconst serviceRoutes = express.Router();\n\nserviceRoutes.use('/html2img', html2img);\nserviceRoutes.use('/dump', dumpProvider);\n\napp.use('/services', serviceRoutes);\n\n/**\n * Connect error handler\n */\napp.use(errorHandler);\n\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/app.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "config",
    "memberof": "src/app.js",
    "static": true,
    "longname": "src/app.js~config",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "secret",
    "memberof": "src/app.js",
    "static": true,
    "longname": "src/app.js~secret",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "assetsPath",
    "memberof": "src/app.js",
    "static": true,
    "longname": "src/app.js~assetsPath",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/app.js",
    "importStyle": null,
    "description": "Static asset files",
    "lineNumber": 91
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "apiRoutes",
    "memberof": "src/app.js",
    "static": true,
    "longname": "src/app.js~apiRoutes",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/app.js",
    "importStyle": null,
    "description": "Create API router",
    "lineNumber": 103
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "name": "serviceRoutes",
    "memberof": "src/app.js",
    "static": true,
    "longname": "src/app.js~serviceRoutes",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/app.js",
    "importStyle": null,
    "description": "SERVICES router",
    "lineNumber": 138
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "app",
    "memberof": "src/app.js",
    "static": true,
    "longname": "src/app.js~app",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/app.js",
    "importStyle": "app",
    "description": "Init express app",
    "lineNumber": 48
  },
  {
    "__docId__": 7,
    "kind": "file",
    "name": "src/components/assets/assets.api.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Asset api\n */\n\nimport express from 'express';\n\nimport {\n  getAssets,\n  getAsset,\n  getAssetAttachment,\n  createAsset,\n  updateAsset,\n  deleteAsset\n} from './assets.controller';\n\nconst router = new express.Router();\n\nrouter.get('/', getAssets);\nrouter.get('/:id', getAsset);\nrouter.get('/:id/:filename', getAssetAttachment);\n\nrouter.post('/:id', createAsset);\nrouter.put('/:id', updateAsset);\nrouter.delete('/:id', deleteAsset);\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/assets/assets.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 8,
    "kind": "file",
    "name": "src/components/assets/assets.controller.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Assets component controller\n */\nimport {lookup} from 'mime-types';\nimport {v4 as generateId} from 'uuid';\nimport formidable from 'formidable';\nimport {readFile, remove} from 'fs-extra';\nimport {resolve} from 'path';\n\nimport {\n  getAssets as getAssetsDAL,\n  getAsset as getAssetDAL,\n  getAssetAttachment as getAssetAttachmentDAL,\n  createAsset as createAssetDAL,\n  updateAsset as updateAssetDAL,\n  deleteAsset as deleteAssetDAL\n} from './assets.dal';\n\n/**\n * Get a list of assets\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n * @todo add filters handling through req queries\n */\nexport const getAssets = (req, res) =>\n  res.json(getAssetsDAL({}));\n\n/**\n * Get a single asset\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const getAsset = (req, res) =>\n  res.json(\n    getAssetDAL({\n      id: req.params.id\n    })\n  );\n\n/**\n * Get a single asset attachment\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const getAssetAttachment = (req, res) => {\n  getAssetAttachmentDAL({\n    ...req.query,\n    id: req.params.id,\n    filename: req.params.filename\n  })\n  .then(({data, mimetype}) => {\n    res.writeHead(200, {'Content-Type': mimetype});\n    res.end(data, 'binary');\n  });\n};\n\n/**\n * Create a single asset\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const createAsset = (req, res) => {\n  const filename = decodeURIComponent(req.params.id);\n  const form = new formidable.IncomingForm({\n    uploadDir : resolve(__dirname + '/../../../temp'),\n    // multiples : true,\n    keepExtensions : true\n  });\n\n  form.on('error', function(err){\n    return res.status(500).send(err);\n  });\n\n\n  form.parse(req, function(err, fields, files) {\n    const attachmentPath = files.file.path;\n    readFile(attachmentPath)\n      .then(data =>\n        createAssetDAL({\n          _id: generateId(),\n          filename,\n          type: 'asset'\n        }, data)\n      )\n      .then(() => remove(attachmentPath))\n      .then(() => res.json(getAssetsDAL({})))\n      .catch(e => res.status(500).send(e));\n  });\n};\n/**\n * Update a single asset\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const updateAsset = (req, res) => {\n  const assetId = req.params.id;\n  const form = new formidable.IncomingForm({\n    uploadDir : resolve(__dirname + '/../../../temp'),\n    // multiples : true,\n    keepExtensions : true\n  });\n\n  form.on('error', function(err){\n    return res.status(500).send(err);\n  });\n\n\n  form.parse(req, function(err, fields, files) {\n    const attachmentPath = files.file.path;\n    const filename= files.file.name;\n    const mimetype = lookup(filename);\n    readFile(attachmentPath)\n      .then(data =>\n        updateAssetDAL(assetId, {\n          filename,\n          mimetype\n        }, data)\n      )\n      .then(() => remove(attachmentPath))\n      .then(() =>\n        res.json(\n          getAssetDAL({\n            id: assetId\n          })\n        )\n      )\n      .catch(e => res.status(500).send(e));\n  });\n};\n\n/**\n * Delete a single asset\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const deleteAsset = (req, res) =>\n  res.json(deleteAssetDAL({_id: req.params.id}));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/assets/assets.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 9,
    "kind": "function",
    "name": "getAssets",
    "memberof": "src/components/assets/assets.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.controller.js~getAssets",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.controller.js",
    "importStyle": "{getAssets}",
    "description": "Get a list of assets",
    "lineNumber": 27,
    "todo": [
      "add filters handling through req queries"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 10,
    "kind": "function",
    "name": "getAsset",
    "memberof": "src/components/assets/assets.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.controller.js~getAsset",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.controller.js",
    "importStyle": "{getAsset}",
    "description": "Get a single asset",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 11,
    "kind": "function",
    "name": "getAssetAttachment",
    "memberof": "src/components/assets/assets.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.controller.js~getAssetAttachment",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.controller.js",
    "importStyle": "{getAssetAttachment}",
    "description": "Get a single asset attachment",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 12,
    "kind": "function",
    "name": "createAsset",
    "memberof": "src/components/assets/assets.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.controller.js~createAsset",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.controller.js",
    "importStyle": "{createAsset}",
    "description": "Create a single asset",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 13,
    "kind": "function",
    "name": "updateAsset",
    "memberof": "src/components/assets/assets.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.controller.js~updateAsset",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.controller.js",
    "importStyle": "{updateAsset}",
    "description": "Update a single asset",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 14,
    "kind": "function",
    "name": "deleteAsset",
    "memberof": "src/components/assets/assets.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.controller.js~deleteAsset",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.controller.js",
    "importStyle": "{deleteAsset}",
    "description": "Delete a single asset",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 15,
    "kind": "file",
    "name": "src/components/assets/assets.dal.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Asset data access layer\n */\nimport {lookup} from 'mime-types';\n\nimport db from '../../utils/plugDb';\n\nimport {Asset as schema} from 'plurishing-schemas';\n\nimport design from './assets.design';\nimport {addDesign} from '../../utils/couchdb';\nimport {dataIsValid} from '../../utils/schemas';\n\n/**\n * Registering couchdb views related to assets objects\n */\naddDesign(db, 'assets', design);\n\n\n/**\n * Gets a list of assets with optional query params\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getAssets = ({\n  query = {},\n  include_docs = true\n}) => {\n  if (query.filename) {\n    return db.viewAsync('assets', 'by_filename', {\n      key: query.filename,\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n  } else {\n    return db.viewAsync('assets', 'by_filename', {\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n  }\n};\n\n/**\n * Gets a asset with a specific id or email\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getAsset = ({\n  id\n}) =>\n  db.getAsync(id)\n    .then(asset =>\n      // verify that data is compliant before returning it\n      dataIsValid(asset, schema)\n    );\n\n/**\n * Gets a asset with a specific id or filename\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getAssetAttachment = ({\n  id,\n  filename,\n  encoding\n}) =>\n  new Promise((resolve, reject) => {\n    db.attachment.get(id, filename, (err, body) => {\n      if (err) {\n        reject(err);\n      } else {\n        const content = encoding === 'base64' ?\n          Buffer.from(body, 'binary').toString('base64')\n          : body;\n        resolve({data: content, mimetype: lookup(filename)});\n      }\n    });\n  });\n\n\n/**\n * Creates a new asset\n * @param {object} asset\n * @param {object} data\n * @return {Promise}\n */\nexport const createAsset = (asset, data) => {\n  const {filename} = asset;\n  const mimeType = lookup(filename) || 'application/octet-stream';\n  // validate data\n  return dataIsValid(asset, schema)\n  // create document\n  .then(() =>\n    db.insertAsync({\n      ...asset,\n      mimetype: mimeType\n    })\n  )\n  // add attachment\n  .then(op => {\n    const {id, rev} = op;\n\n    return new Promise((resolve, reject) => {\n      db.attachment.insert(\n        // doc id\n        id,\n        // attachment filename\n        filename,\n        // attachment data\n        data,\n        // doc mimetype\n        mimeType,\n        // doc rev\n        {rev},\n        // callback\n        (err, body) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(body);\n          }\n        }\n      );\n    });\n  });\n};\n\n/**\n * Updates an asset\n * @param {string} id - id of the asset\n * @param {object} asset - asset data to update\n * @param {object} data - attachment data to update\n * @return {Promise}\n */\nexport const updateAsset = (assetId, {filename, mimetype}, attachmentData) => {\n  // get existing document\n  return db.getAsync(assetId)\n          // then update document\n          .then(asset =>\n            db.insertAsync({\n              ...asset,\n              filename,\n              mimetype,\n              rev: asset._rev\n            })\n          )\n          // destroy previous attachments\n          .then(() =>\n            db.getAsync(assetId)\n          )\n          .then(asset => {\n            const previousAttachment =  asset._attachments && Object.keys(asset._attachments)[0];\n            return new Promise((resolve, reject) => {\n              if (previousAttachment) {\n                db.attachment.destroy(asset._id, encodeURIComponent(previousAttachment), {rev: asset._rev},\n                  (err, body) => {\n                    if (err) {\n                      reject(err);\n                    } else resolve(body);\n                  });\n              }\n            });\n          })\n          // add new attachment\n          .then(op => {\n            const {id, rev} = op;\n\n            return new Promise((resolve, reject) => {\n              db.attachment.insert(\n                // doc id\n                id,\n                // attachment filename\n                filename,\n                // attachment data\n                attachmentData,\n                // doc mimetype\n                mimetype,\n                // doc rev\n                {rev},\n                // callback\n                (err, body) => {\n                  if (err) {\n                    reject(err);\n                  } else {\n                    resolve(body);\n                  }\n                }\n              );\n            });\n          });\n};\n\n/**\n * Deletes a asset\n * @param {object} asset - asset to delete\n * @return {Promise}\n */\nexport const deleteAsset = ({_id}) =>\n  db.getAsync(_id)\n    .then(asset => db.destroyAsync(_id, asset._rev));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/assets/assets.dal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 16,
    "kind": "function",
    "name": "getAssets",
    "memberof": "src/components/assets/assets.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.dal.js~getAssets",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.dal.js",
    "importStyle": "{getAssets}",
    "description": "Gets a list of assets with optional query params",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 17,
    "kind": "function",
    "name": "getAsset",
    "memberof": "src/components/assets/assets.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.dal.js~getAsset",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.dal.js",
    "importStyle": "{getAsset}",
    "description": "Gets a asset with a specific id or email",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 18,
    "kind": "function",
    "name": "getAssetAttachment",
    "memberof": "src/components/assets/assets.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.dal.js~getAssetAttachment",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.dal.js",
    "importStyle": "{getAssetAttachment}",
    "description": "Gets a asset with a specific id or filename",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 19,
    "kind": "function",
    "name": "createAsset",
    "memberof": "src/components/assets/assets.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.dal.js~createAsset",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.dal.js",
    "importStyle": "{createAsset}",
    "description": "Creates a new asset",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "asset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 20,
    "kind": "function",
    "name": "updateAsset",
    "memberof": "src/components/assets/assets.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.dal.js~updateAsset",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.dal.js",
    "importStyle": "{updateAsset}",
    "description": "Updates an asset",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of the asset"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "asset",
        "description": "asset data to update"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "attachment data to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 21,
    "kind": "function",
    "name": "deleteAsset",
    "memberof": "src/components/assets/assets.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/assets/assets.dal.js~deleteAsset",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/assets/assets.dal.js",
    "importStyle": "{deleteAsset}",
    "description": "Deletes a asset",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "asset",
        "description": "asset to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 22,
    "kind": "file",
    "name": "src/components/assets/assets.design.js",
    "content": "export default {\n  \"views\": {\n    \"by_filename\": {\n      \"map\": `function(doc) {\n                    if (doc.type === 'asset') {\n                      emit(doc.filename, null);\n                    }\n                  }`\n    }\n  }\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/assets/assets.design.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 23,
    "kind": "file",
    "name": "src/components/assets/assets.design.spec.js",
    "content": "import {expect} from 'chai';\nimport design from './assets.design';\n\ndescribe('Assets couchdb design', () => {\n    it('should eval each view map as a function', (done) => {\n        Object.keys(design.views).forEach(id => {\n          const view = design.views[id];\n          expect(eval(`(${view.map})`)).to.be.a('function');\n        });\n        done();\n    });\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/assets/assets.design.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 24,
    "kind": "file",
    "name": "src/components/assets/index.js",
    "content": "// user-related db views\nexport design from './assets.design';\n// view controller\nexport * as controller from './assets.controller';\n// database abstraction layer operations\nexport * as dal from './assets.dal';\n// api / routes bindings\nexport api from './assets.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/assets/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 25,
    "kind": "file",
    "name": "src/components/auth/auth.api.js",
    "content": "import express from 'express';\n\nimport {\n  login,\n  resetPassword,\n  signup\n} from './auth.controller';\n\nconst router = new express.Router();\n\nrouter.post('/request-password-reset', resetPassword);\nrouter.post('/sign-up', signup);\nrouter.post('/login', login);\nrouter;\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/auth/auth.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 26,
    "kind": "file",
    "name": "src/components/auth/auth.controller.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Authentification routes handler\n */\n\nimport jwt from 'jsonwebtoken'; // used to create, sign, and verify tokens\nimport {comparePwd} from '../../utils/crypto';\nimport sendEmail from '../../utils/mailer';\nimport {resetPwdEmail} from '../../utils/emails';\n\n/**\n * @todo avoid this horizontal dependency\n */\nimport {dal as usersDAL} from '../users';\n\nimport {\n  getConfig\n} from '../../utils/config';\nconst config = getConfig();\n\nconst {\n  // smtpPort,\n  // smtpHost,\n  smtpEmail,\n  smtpService,\n  smtpPassword,\n  backofficeBaseUri\n} = config;\nconst mailConfig = {\n  // smtpPort,\n  // smtpHost,\n  smtpEmail,\n  smtpService,\n  smtpPassword\n};\n\n/**\n * Builds a jwt token with user data in payload\n * @param {object} user - the user data to build the token with\n * @param {string} secret - the app secret to use to encode the token\n * @param {number} expiresIn - expiration delay of the token\n * @return {string} token\n * note : 86400 == expires in 24 hours\n */\nconst buildToken = (user, secret, expiresIn = 86400) => {\n  const payload = {\n    admin: user.admin,\n    userid: user._id\n  };\n  const token = jwt.sign(payload, secret, {\n    expiresIn\n  });\n  return token;\n};\n/**\n * Handle login attempt from a user\n * @todo write everything in promise style\n * @todo normalize behaviors for error res\n * @param {object} req - the request\n * @param {object} res - the resource\n */\nexport const login = (req, res) => {\n  // find the user\n  usersDAL.getUser({\n    email: req.body.email\n  })\n  // then check his credentials\n  .then(user => {\n    if (!user) {\n      return res.json({ success: false, message: 'Authentication failed. User not found.' });\n    } else if (user) {\n      const pwd = req.body.password;\n      const hash = user.password;\n      comparePwd(pwd, hash)\n        .then(correct => {\n          if (correct) {\n              // if user is found and password is right\n              // create a token\n            const token = buildToken(user, req.app.get('superSecret'));\n            res.json({\n              success: true,\n              message: 'Enjoy your token!',\n              user: Object.assign({}, user, {password: undefined}),\n              token: token\n            });\n          } else {\n            res.status(422).json({ success: false, message: 'Authentication failed. Wrong password.' });\n          }\n        })\n        .catch(e => {\n          res.status(422).json({ success: false, message: 'Authentication failed. Error with password.', error: e });\n        });\n    }\n  })\n  .catch(error => {\n    res.status(404).json({ success: false, message: 'No match.', error });\n  });\n};\n\n/**\n * Handle signup request from a user\n * Note: for this cms users creation is protected (admins only)\n * so signup is just the process of activating an account and setting a first password\n * @param {object} req - the request\n * @param {object} res - the resource\n */\nexport const signup = (req, res) => {\n  // find the user\n  usersDAL.getUser({\n    id: req.body.id\n  })\n  .then(user => {\n    if (!user) {\n      res.json({ success: false, message: 'Authentication failed. User not found.' });\n    } else if (user) {\n      const token = req.body.token || req.param('token') || req.headers['x-access-token'];\n      // decode token\n      if (token) {\n        // verifies secret and checks exp\n        jwt.verify(token, req.app.get('superSecret'), (err) => {\n          if (err) {\n            return res.json({ success: false, message: 'Failed to authenticate signup token.' });\n          } else {\n\n            // create a new login token\n            const newToken = buildToken(user, req.app.get('superSecret'));\n            // delete temporary token\n            // user.resetPasswordToken = undefined;\n\n            usersDAL.updateUser(user._id, user)\n              .then(() => {\n                res.json({\n                  success: true,\n                  message: 'Enjoy your token!',\n                  user, // : Object.assign({}, user, {password: undefined, resetPasswordToken: undefined}),\n                  token: newToken\n                });\n              })\n              .catch(e => {\n                res.status(500).send({\n                  success: false,\n                  message: 'Error while updating user with new data',\n                  error: e\n                });\n              });\n          }\n        });\n      } else {\n        // if there is no token\n        // return an error\n        return res.status(403).send({\n          success: false,\n          message: 'No signup token provided.'\n        });\n      }\n    }\n  });\n};\n\n/**\n * Handle password reset request from a user\n * @todo write everything in promise style\n * @param {object} req - the request\n * @param {object} res - the resource\n */\nexport const resetPassword = (req, res) => {\n  const body = req.body;\n  const email = body.email;\n  if (email) {\n    usersDAL.getUser({\n      email: email\n    })\n    .then(user => {\n      if (user) {\n        // create a token\n        const token = buildToken(user, req.app.get('superSecret'));\n        user.resetPasswordToken = token;\n\n        usersDAL.updateUser(user._id, user)\n        .then(() => {\n          const appUrl = backofficeBaseUri;\n          const {html, subject} = resetPwdEmail(appUrl, user);\n\n          return sendEmail({\n            subject,\n            html,\n            to: [email]\n          }, mailConfig, req.log);\n        })\n        .then(() => {\n          res.json({message: 'request sent'});\n        })\n        .catch(e => res.status(500).send({error: e, message: 'mail failed'}));\n      } else {\n        res.status(404).json({message: 'user not found'});\n      }\n    })\n    .catch(error => res.status(500).json({message: 'error in db', error}));\n  } else {\n    res.status(422).json({message: 'no email in request'});\n  }\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/auth/auth.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 27,
    "kind": "variable",
    "name": "config",
    "memberof": "src/components/auth/auth.controller.js",
    "static": true,
    "longname": "src/components/auth/auth.controller.js~config",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 28,
    "kind": "variable",
    "name": "smtpEmail",
    "memberof": "src/components/auth/auth.controller.js",
    "static": true,
    "longname": "src/components/auth/auth.controller.js~smtpEmail",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 29,
    "kind": "variable",
    "name": "mailConfig",
    "memberof": "src/components/auth/auth.controller.js",
    "static": true,
    "longname": "src/components/auth/auth.controller.js~mailConfig",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 30,
    "kind": "function",
    "name": "buildToken",
    "memberof": "src/components/auth/auth.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/auth/auth.controller.js~buildToken",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/auth/auth.controller.js",
    "importStyle": null,
    "description": "Builds a jwt token with user data in payload",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "the user data to build the token with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secret",
        "description": "the app secret to use to encode the token"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "expiresIn",
        "description": "expiration delay of the token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "token\nnote : 86400 == expires in 24 hours"
    }
  },
  {
    "__docId__": 31,
    "kind": "function",
    "name": "login",
    "memberof": "src/components/auth/auth.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/auth/auth.controller.js~login",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/auth/auth.controller.js",
    "importStyle": "{login}",
    "description": "Handle login attempt from a user",
    "lineNumber": 63,
    "todo": [
      "write everything in promise style",
      "normalize behaviors for error res"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource"
      }
    ]
  },
  {
    "__docId__": 32,
    "kind": "function",
    "name": "signup",
    "memberof": "src/components/auth/auth.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/auth/auth.controller.js~signup",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/auth/auth.controller.js",
    "importStyle": "{signup}",
    "description": "Handle signup request from a user\nNote: for this cms users creation is protected (admins only)\nso signup is just the process of activating an account and setting a first password",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource"
      }
    ]
  },
  {
    "__docId__": 33,
    "kind": "function",
    "name": "resetPassword",
    "memberof": "src/components/auth/auth.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/auth/auth.controller.js~resetPassword",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/auth/auth.controller.js",
    "importStyle": "{resetPassword}",
    "description": "Handle password reset request from a user",
    "lineNumber": 167,
    "todo": [
      "write everything in promise style"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource"
      }
    ]
  },
  {
    "__docId__": 34,
    "kind": "file",
    "name": "src/components/auth/index.js",
    "content": "export controller from './auth.controller';\nexport api from './auth.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/auth/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 35,
    "kind": "file",
    "name": "src/components/compositions/compositions.api.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Composition api\n */\n\nimport express from 'express';\n\nimport {\n  getCompositions,\n  getComposition,\n  createComposition,\n  updateComposition,\n  deleteComposition\n} from './compositions.controller';\n\nconst router = new express.Router();\n\nrouter.get('/', getCompositions);\nrouter.get('/:id', getComposition);\nrouter.post('/', createComposition);\nrouter.put('/:id', updateComposition);\nrouter.delete('/:id', deleteComposition);\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/compositions/compositions.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 36,
    "kind": "file",
    "name": "src/components/compositions/compositions.controller.js",
    "content": "// /**\n//  * Plurishing-backend\n//  * =======\n//  * Compositions component controller\n//  */\n\nimport {\n  getCompositions as getCompositionsDAL,\n  getComposition as getCompositionDAL,\n  createComposition as createCompositionDAL,\n  updateComposition as updateCompositionDAL,\n  deleteComposition as deleteCompositionDAL\n} from './compositions.dal';\n\n/**\n * Get a list of compositions\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n * @todo add filters handling through req queries\n */\nexport const getCompositions = (req, res) =>\n  res.json(getCompositionsDAL({}));\n\n/**\n * Get a single composition\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const getComposition = (req, res) =>\n  res.json(\n    getCompositionDAL({\n      id: req.params.id\n    })\n  );\n\n/**\n * Create a single composition\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const createComposition = (req, res) =>\n  // create the composition\n  createCompositionDAL({\n          ...req.body,\n          type: 'composition'\n        })\n  // return the composition\n  .then(({id}) => getCompositionDAL({id}))\n  .then(composition => res.json(composition));\n\n/**\n * Update a single composition\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const updateComposition = (req, res) =>\n  res.json(\n    // update the composition\n    updateCompositionDAL(\n      req.params.id,\n      req.body, // for now we perform a full replace (vs merge with $set)\n    )\n    // return the composition\n    .then(({id}) => getCompositionDAL({id}))\n    .then(composition => res.json(composition))\n  );\n\n/**\n * Delete a single composition\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const deleteComposition = (req, res) =>\n  res.json(deleteCompositionDAL({_id: req.params.id}));\n\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/compositions/compositions.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 37,
    "kind": "function",
    "name": "getCompositions",
    "memberof": "src/components/compositions/compositions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.controller.js~getCompositions",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.controller.js",
    "importStyle": "{getCompositions}",
    "description": "Get a list of compositions",
    "lineNumber": 21,
    "todo": [
      "add filters handling through req queries"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 38,
    "kind": "function",
    "name": "getComposition",
    "memberof": "src/components/compositions/compositions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.controller.js~getComposition",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.controller.js",
    "importStyle": "{getComposition}",
    "description": "Get a single composition",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 39,
    "kind": "function",
    "name": "createComposition",
    "memberof": "src/components/compositions/compositions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.controller.js~createComposition",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.controller.js",
    "importStyle": "{createComposition}",
    "description": "Create a single composition",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 40,
    "kind": "function",
    "name": "updateComposition",
    "memberof": "src/components/compositions/compositions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.controller.js~updateComposition",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.controller.js",
    "importStyle": "{updateComposition}",
    "description": "Update a single composition",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 41,
    "kind": "function",
    "name": "deleteComposition",
    "memberof": "src/components/compositions/compositions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.controller.js~deleteComposition",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.controller.js",
    "importStyle": "{deleteComposition}",
    "description": "Delete a single composition",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 42,
    "kind": "file",
    "name": "src/components/compositions/compositions.dal.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Composition data access layer\n */\n\nimport db from '../../utils/plugDb';\n\nimport {Composition as schema} from 'plurishing-schemas';\nimport design from './compositions.design';\nimport {addDesign} from '../../utils/couchdb';\nimport {dataIsValid} from '../../utils/schemas';\n\n/**\n * Registering couchdb views related to compositions objects\n */\naddDesign(db, 'compositions', design);\n\n\n/**\n * Gets a list of compositions with optional query params\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getCompositions = ({\n  // query = {},\n  include_docs = true\n}) => {\n  return db.viewAsync('compositions', 'by_id', {\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n};\n\n/**\n * Gets a composition with a specific id\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getComposition = ({\n  id\n}) =>\n  db.getAsync(id)\n      .then(composition =>\n        // verify that returned data is compliant before returning it\n        dataIsValid(composition, schema)\n      );\n\n/**\n * Creates a new composition\n * @param {object} composition\n * @return {Promise}\n */\nexport const createComposition = composition =>\n  dataIsValid(composition, schema)\n    .then(() => db.insertAsync(composition));\n\n/**\n * Updates a composition\n * @param {string} id - id of composition to update\n * @param {object} composition - data to update\n * @return {Promise}\n */\nexport const updateComposition = (id, composition) =>\n  // validate\n  dataIsValid(composition, schema)\n    // get existing document\n    .then(() => db.getAsync(id))\n    // update with new rev\n    .then(compositionDb =>\n        db.insertAsync({\n          ...composition,\n          _rev: compositionDb._rev\n        }, compositionDb._id)\n    );\n\n/**\n * Deletes a composition\n * @param {object} composition - composition to delete\n * @return {Promise}\n */\nexport const deleteComposition = ({_id}) =>\n  db.getAsync(_id)\n    .then(composition => db.destroyAsync(_id, composition._rev));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/compositions/compositions.dal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 43,
    "kind": "function",
    "name": "getCompositions",
    "memberof": "src/components/compositions/compositions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.dal.js~getCompositions",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.dal.js",
    "importStyle": "{getCompositions}",
    "description": "Gets a list of compositions with optional query params",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 44,
    "kind": "function",
    "name": "getComposition",
    "memberof": "src/components/compositions/compositions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.dal.js~getComposition",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.dal.js",
    "importStyle": "{getComposition}",
    "description": "Gets a composition with a specific id",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 45,
    "kind": "function",
    "name": "createComposition",
    "memberof": "src/components/compositions/compositions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.dal.js~createComposition",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.dal.js",
    "importStyle": "{createComposition}",
    "description": "Creates a new composition",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "composition",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 46,
    "kind": "function",
    "name": "updateComposition",
    "memberof": "src/components/compositions/compositions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.dal.js~updateComposition",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.dal.js",
    "importStyle": "{updateComposition}",
    "description": "Updates a composition",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of composition to update"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "composition",
        "description": "data to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 47,
    "kind": "function",
    "name": "deleteComposition",
    "memberof": "src/components/compositions/compositions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/compositions/compositions.dal.js~deleteComposition",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/compositions/compositions.dal.js",
    "importStyle": "{deleteComposition}",
    "description": "Deletes a composition",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "composition",
        "description": "composition to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/components/compositions/compositions.design.js",
    "content": "export default {\n  \"views\": {\n    \"by_id\": {\n      \"map\": `function(doc) {\n                    if (doc.type === 'composition') {\n                      emit(doc._id, null);\n                    }\n                  }`\n    }\n  }\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/compositions/compositions.design.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/components/compositions/compositions.design.spec.js",
    "content": "import {expect} from 'chai';\nimport design from './compositions.design';\n\ndescribe('Compositions couchdb design', () => {\n    it('should eval each view map as a function', (done) => {\n        Object.keys(design.views).forEach(id => {\n          const view = design.views[id];\n          expect(eval(`(${view.map})`)).to.be.a('function');\n        });\n        done();\n    });\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/compositions/compositions.design.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/components/compositions/index.js",
    "content": "// composition-related db views\nexport design from './compositions.design';\n// view controller\nexport * as controller from './compositions.controller';\n// database abstraction layer operations\nexport * as dal from './compositions.dal';\n// api / routes bindings\nexport api from './compositions.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/compositions/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/components/deliverables/deliverables.api.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Deliverable api\n */\n\nimport express from 'express';\n\nimport {\n  getDeliverables,\n  getDeliverable,\n  getDeliverableAttachment,\n  createDeliverable,\n  updateDeliverable,\n  deleteDeliverable\n} from './deliverables.controller';\n\nconst router = new express.Router();\n\nrouter.get('/', getDeliverables);\nrouter.get('/:id', getDeliverable);\nrouter.get('/:id/:filename', getDeliverableAttachment);\n\nrouter.post('/:id', createDeliverable);\nrouter.put('/:id', updateDeliverable);\nrouter.delete('/:id', deleteDeliverable);\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/deliverables/deliverables.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/components/deliverables/deliverables.controller.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Deliverables component controller\n */\nimport {lookup} from 'mime-types';\nimport {v4 as generateId} from 'uuid';\nimport formidable from 'formidable';\nimport {readFile, remove} from 'fs-extra';\nimport {resolve} from 'path';\n\nimport {\n  getDeliverables as getDeliverablesDAL,\n  getDeliverable as getDeliverableDAL,\n  getDeliverableAttachment as getDeliverableAttachmentDAL,\n  createDeliverable as createDeliverableDAL,\n  updateDeliverable as updateDeliverableDAL,\n  deleteDeliverable as deleteDeliverableDAL\n} from './deliverables.dal';\n\n/**\n * Get a list of deliverables\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n * @todo add filters handling through req queries\n */\nexport const getDeliverables = (req, res) =>\n  res.json(getDeliverablesDAL({}));\n\n/**\n * Get a single deliverable\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const getDeliverable = (req, res) =>\n  res.json(\n    getDeliverableDAL({\n      id: req.params.id\n    })\n  );\n\n/**\n * Get a single deliverable attachment\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const getDeliverableAttachment = (req, res) => {\n  getDeliverableAttachmentDAL({\n    id: req.params.id,\n    filename: req.params.filename\n  })\n  .then(({data, mimetype}) => {\n    res.writeHead(200, {'Content-Type': mimetype});\n    res.end(data, 'binary');\n  });\n};\n\n/**\n * Create a single deliverable\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const createDeliverable = (req, res) => {\n  const filename = decodeURIComponent(req.params.id);\n  const form = new formidable.IncomingForm({\n    uploadDir : resolve(__dirname + '/../../../temp'),\n    // multiples : true,\n    keepExtensions : true\n  });\n\n  form.on('error', function(err){\n    return res.status(500).send(err);\n  });\n\n\n  form.parse(req, function(err, fields, files) {\n    const attachmentPath = files.file.path;\n    readFile(attachmentPath)\n      .then(data =>\n        createDeliverableDAL({\n          _id: generateId(),\n          filename,\n          type: 'deliverable'\n        }, data)\n      )\n      .then(() => remove(attachmentPath))\n      .then(() => res.json(getDeliverablesDAL({})))\n      .catch(e => res.status(500).send(e));\n  });\n};\n/**\n * Update a single deliverable\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const updateDeliverable = (req, res) => {\n  const deliverableId = req.params.id;\n  const form = new formidable.IncomingForm({\n    uploadDir : resolve(__dirname + '/../../../temp'),\n    // multiples : true,\n    keepExtensions : true\n  });\n\n  form.on('error', function(err){\n    return res.status(500).send(err);\n  });\n\n\n  form.parse(req, function(err, fields, files) {\n    const attachmentPath = files.file.path;\n    const filename= files.file.name;\n    const mimetype = lookup(filename);\n    readFile(attachmentPath)\n      .then(data =>\n        updateDeliverableDAL(deliverableId, {\n          filename,\n          mimetype\n        }, data)\n      )\n      .then(() => remove(attachmentPath))\n      .then(() =>\n        res.json(\n          getDeliverableDAL({\n            id: deliverableId\n          })\n        )\n      )\n      .catch(e => res.status(500).send(e));\n  });\n};\n\n/**\n * Delete a single deliverable\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const deleteDeliverable = (req, res) =>\n  res.json(deleteDeliverableDAL({_id: req.params.id}));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/deliverables/deliverables.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "getDeliverables",
    "memberof": "src/components/deliverables/deliverables.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.controller.js~getDeliverables",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.controller.js",
    "importStyle": "{getDeliverables}",
    "description": "Get a list of deliverables",
    "lineNumber": 27,
    "todo": [
      "add filters handling through req queries"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "getDeliverable",
    "memberof": "src/components/deliverables/deliverables.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.controller.js~getDeliverable",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.controller.js",
    "importStyle": "{getDeliverable}",
    "description": "Get a single deliverable",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "getDeliverableAttachment",
    "memberof": "src/components/deliverables/deliverables.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.controller.js~getDeliverableAttachment",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.controller.js",
    "importStyle": "{getDeliverableAttachment}",
    "description": "Get a single deliverable attachment",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "createDeliverable",
    "memberof": "src/components/deliverables/deliverables.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.controller.js~createDeliverable",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.controller.js",
    "importStyle": "{createDeliverable}",
    "description": "Create a single deliverable",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "updateDeliverable",
    "memberof": "src/components/deliverables/deliverables.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.controller.js~updateDeliverable",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.controller.js",
    "importStyle": "{updateDeliverable}",
    "description": "Update a single deliverable",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "deleteDeliverable",
    "memberof": "src/components/deliverables/deliverables.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.controller.js~deleteDeliverable",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.controller.js",
    "importStyle": "{deleteDeliverable}",
    "description": "Delete a single deliverable",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/components/deliverables/deliverables.dal.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Deliverable data access layer\n */\nimport {lookup} from 'mime-types';\n\nimport db from '../../utils/plugDb';\n\nimport {Deliverable as schema} from 'plurishing-schemas';\n\nimport design from './deliverables.design';\nimport {addDesign} from '../../utils/couchdb';\nimport {dataIsValid} from '../../utils/schemas';\n\n/**\n * Registering couchdb views related to deliverables objects\n */\naddDesign(db, 'deliverables', design);\n\n\n/**\n * Gets a list of deliverables with optional query params\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getDeliverables = ({\n  query = {},\n  include_docs = true\n}) => {\n  if (query.filename) {\n    return db.viewAsync('deliverables', 'by_filename', {\n      key: query.filename,\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n  } else {\n    return db.viewAsync('deliverables', 'by_filename', {\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n  }\n};\n\n/**\n * Gets a deliverable with a specific id or email\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getDeliverable = ({\n  id\n}) =>\n  db.getAsync(id)\n    .then(deliverable =>\n      // verify that data is compliant before returning it\n      dataIsValid(deliverable, schema)\n    );\n\n/**\n * Gets a deliverable with a specific id or email\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getDeliverableAttachment = ({\n  id,\n  filename\n}) =>\n  new Promise((resolve, reject) => {\n    db.attachment.get(id, filename, (err, body) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({data: body, mimetype: lookup(filename)});\n      }\n    });\n  });\n\n\n/**\n * Creates a new deliverable\n * @param {object} deliverable\n * @param {object} data\n * @return {Promise}\n */\nexport const createDeliverable = (deliverable, data) => {\n  const {filename} = deliverable;\n  const mimeType = lookup(filename);\n  // validate data\n  return dataIsValid(deliverable, schema)\n  // create document\n  .then(() =>\n    db.insertAsync({\n      ...deliverable,\n      mimetype: mimeType\n    })\n  )\n  // add attachment\n  .then(op => {\n    const {id, rev} = op;\n\n    return new Promise((resolve, reject) => {\n      db.attachment.insert(\n        // doc id\n        id,\n        // attachment filename\n        filename,\n        // attachment data\n        data,\n        // doc mimetype\n        mimeType,\n        // doc rev\n        {rev},\n        // callback\n        (err, body) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(body);\n          }\n        }\n      );\n    });\n  })\n  .catch(e => Promise.reject(e));\n};\n\n/**\n * Updates a deliverable\n * @param {string} id - id of the deliverable\n * @param {object} deliverable - deliverable data to update\n * @param {object} data - attachment data to update\n * @return {Promise}\n */\nexport const updateDeliverable = (deliverableId, {filename, mimetype}, attachmentData) => {\n  // get existing document\n  return db.getAsync(deliverableId)\n          // then update document\n          .then(deliverable =>\n            db.insertAsync({\n              ...deliverable,\n              filename,\n              mimetype,\n              rev: deliverable._rev\n            })\n          )\n          // destroy previous attachments\n          .then(() =>\n            db.getAsync(deliverableId)\n          )\n          .then(deliverable => {\n            const previousAttachment =  deliverable._attachments && Object.keys(deliverable._attachments)[0];\n            return new Promise((resolve, reject) => {\n              if (previousAttachment) {\n                db.attachment.destroy(deliverable._id, encodeURIComponent(previousAttachment), {rev: deliverable._rev},\n                  (err, body) => {\n                    if (err) {\n                      reject(err);\n                    } else resolve(body);\n                  });\n              }\n            });\n          })\n          // add new attachment\n          .then(op => {\n            const {id, rev} = op;\n\n            return new Promise((resolve, reject) => {\n              db.attachment.insert(\n                // doc id\n                id,\n                // attachment filename\n                filename,\n                // attachment data\n                attachmentData,\n                // doc mimetype\n                mimetype,\n                // doc rev\n                {rev},\n                // callback\n                (err, body) => {\n                  if (err) {\n                    reject(err);\n                  } else {\n                    resolve(body);\n                  }\n                }\n              );\n            });\n          });\n};\n\n/**\n * Deletes a deliverable\n * @param {object} deliverable - deliverable to delete\n * @return {Promise}\n */\nexport const deleteDeliverable = ({_id}) =>\n  db.getAsync(_id)\n    .then(deliverable => db.destroyAsync(_id, deliverable._rev));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/deliverables/deliverables.dal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "getDeliverables",
    "memberof": "src/components/deliverables/deliverables.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.dal.js~getDeliverables",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.dal.js",
    "importStyle": "{getDeliverables}",
    "description": "Gets a list of deliverables with optional query params",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "getDeliverable",
    "memberof": "src/components/deliverables/deliverables.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.dal.js~getDeliverable",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.dal.js",
    "importStyle": "{getDeliverable}",
    "description": "Gets a deliverable with a specific id or email",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "getDeliverableAttachment",
    "memberof": "src/components/deliverables/deliverables.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.dal.js~getDeliverableAttachment",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.dal.js",
    "importStyle": "{getDeliverableAttachment}",
    "description": "Gets a deliverable with a specific id or email",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "createDeliverable",
    "memberof": "src/components/deliverables/deliverables.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.dal.js~createDeliverable",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.dal.js",
    "importStyle": "{createDeliverable}",
    "description": "Creates a new deliverable",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "deliverable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "updateDeliverable",
    "memberof": "src/components/deliverables/deliverables.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.dal.js~updateDeliverable",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.dal.js",
    "importStyle": "{updateDeliverable}",
    "description": "Updates a deliverable",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of the deliverable"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "deliverable",
        "description": "deliverable data to update"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "attachment data to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "deleteDeliverable",
    "memberof": "src/components/deliverables/deliverables.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/deliverables/deliverables.dal.js~deleteDeliverable",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/deliverables/deliverables.dal.js",
    "importStyle": "{deleteDeliverable}",
    "description": "Deletes a deliverable",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "deliverable",
        "description": "deliverable to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/components/deliverables/deliverables.design.js",
    "content": "export default {\n  \"views\": {\n    \"by_filename\": {\n      \"map\": `function(doc) {\n                    if (doc.type === 'deliverable') {\n                      emit(doc.filename, null);\n                    }\n                  }`\n    }\n  }\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/deliverables/deliverables.design.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/components/deliverables/deliverables.design.spec.js",
    "content": "import {expect} from 'chai';\nimport design from './deliverables.design';\n\ndescribe('Deliverables couchdb design', () => {\n    it('should eval each view map as a function', (done) => {\n        Object.keys(design.views).forEach(id => {\n          const view = design.views[id];\n          expect(eval(`(${view.map})`)).to.be.a('function');\n        });\n        done();\n    });\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/deliverables/deliverables.design.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/components/deliverables/index.js",
    "content": "// user-related db views\nexport design from './deliverables.design';\n// view controller\nexport * as controller from './deliverables.controller';\n// database abstraction layer operations\nexport * as dal from './deliverables.dal';\n// api / routes bindings\nexport api from './deliverables.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/deliverables/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/components/diffusions/diffusions.api.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Diffusion api\n */\n\nimport express from 'express';\n\nimport {\n  getDiffusions,\n  getDiffusion,\n  createDiffusion,\n  updateDiffusion,\n  deleteDiffusion\n} from './diffusions.controller';\n\nconst router = new express.Router();\n\nrouter.get('/', getDiffusions);\nrouter.get('/:id', getDiffusion);\nrouter.post('/', createDiffusion);\nrouter.put('/:id', updateDiffusion);\nrouter.delete('/:id', deleteDiffusion);\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/diffusions/diffusions.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/components/diffusions/diffusions.controller.js",
    "content": "// /**\n//  * Plurishing-backend\n//  * =======\n//  * Diffusions component controller\n//  */\n\nimport {\n  getDiffusions as getDiffusionsDAL,\n  getDiffusion as getDiffusionDAL,\n  createDiffusion as createDiffusionDAL,\n  updateDiffusion as updateDiffusionDAL,\n  deleteDiffusion as deleteDiffusionDAL\n} from './diffusions.dal';\n\nimport {controller as micropublicationController} from '../../releasers/micropublication';\nimport {controller as staticpublicationController} from '../../releasers/staticpublication';\nimport {controller as dynamicpublicationController} from '../../releasers/dynamicpublication';\n\n\n/**\n * Get a list of diffusions\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n * @todo add filters handling through req queries\n */\nexport const getDiffusions = (req, res) =>\n  res.json(getDiffusionsDAL({}));\n\n/**\n * Get a single diffusion\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const getDiffusion = (req, res) =>\n  res.json(\n    getDiffusionDAL({\n      id: req.params.id\n    })\n  );\n\n/**\n * Create a single diffusion\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const createDiffusion = (req, res) => {\n  // normally diffusion should have a 'waiting' status when provided\n  const diff = {\n    ...req.body,\n    status: 'processing'\n  };\n  let diffId;\n  // create the diffusion\n  createDiffusionDAL(diff)\n  // return the diffusion with 'processing' status\n  .then(({id}) => {\n    diffId = id;\n    return getDiffusionDAL({id});\n  })\n  .then(diffusion => res.json(diffusion))\n  // launch diffusion operations\n  .then(() => {\n    switch(diff.montage_type) {\n      case 'micropublication':\n        return micropublicationController.release({...diff, _id: diffId});\n      case 'static':\n        return staticpublicationController.release({...diff, _id: diffId});\n      case 'dynamic':\n        return dynamicpublicationController.release({...diff, _id: diffId});\n      default:\n        return Promise.resolve();\n    }\n  })\n  // success\n  .then(() => {\n    return updateDiffusionDAL(diffId, {...diff, status: 'success'});\n  })\n  // error\n  .catch(() => {\n    updateDiffusionDAL(diffId, {...diff, status: 'error'});\n  });\n};\n\n/**\n * Update a single diffusion\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const updateDiffusion = (req, res) =>\n  res.json(\n    // update the diffusion\n    updateDiffusionDAL(\n      req.params.id,\n      req.body, // for now we perform a full replace (vs merge with $set)\n    )\n    // return the diffusion\n    .then(({id}) => getDiffusionDAL({id}))\n    .then(diffusion => res.json(diffusion))\n  );\n\n/**\n * Delete a single diffusion\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const deleteDiffusion = (req, res) =>\n  res.json(deleteDiffusionDAL({_id: req.params.id}));\n\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/diffusions/diffusions.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "getDiffusions",
    "memberof": "src/components/diffusions/diffusions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.controller.js~getDiffusions",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.controller.js",
    "importStyle": "{getDiffusions}",
    "description": "Get a list of diffusions",
    "lineNumber": 26,
    "todo": [
      "add filters handling through req queries"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "getDiffusion",
    "memberof": "src/components/diffusions/diffusions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.controller.js~getDiffusion",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.controller.js",
    "importStyle": "{getDiffusion}",
    "description": "Get a single diffusion",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "createDiffusion",
    "memberof": "src/components/diffusions/diffusions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.controller.js~createDiffusion",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.controller.js",
    "importStyle": "{createDiffusion}",
    "description": "Create a single diffusion",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "updateDiffusion",
    "memberof": "src/components/diffusions/diffusions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.controller.js~updateDiffusion",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.controller.js",
    "importStyle": "{updateDiffusion}",
    "description": "Update a single diffusion",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "deleteDiffusion",
    "memberof": "src/components/diffusions/diffusions.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.controller.js~deleteDiffusion",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.controller.js",
    "importStyle": "{deleteDiffusion}",
    "description": "Delete a single diffusion",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/components/diffusions/diffusions.dal.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Diffusion data access layer\n */\n\nimport db from '../../utils/plugDb';\n\nimport {Diffusion as schema} from 'plurishing-schemas';\nimport design from './diffusions.design';\nimport {addDesign} from '../../utils/couchdb';\nimport {dataIsValid} from '../../utils/schemas';\n\n/**\n * Registering couchdb views related to diffusions objects\n */\naddDesign(db, 'diffusions', design);\n\n\n/**\n * Gets a list of diffusions with optional query params\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getDiffusions = ({\n  // query = {},\n  include_docs = true\n}) => {\n  return db.viewAsync('diffusions', 'by_id', {\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n};\n\n/**\n * Gets a diffusion with a specific id\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getDiffusion = ({\n  id\n}) =>\n  db.getAsync(id)\n      .then(diffusion =>\n        // verify that data is compliant before returning it\n        dataIsValid(diffusion, schema)\n      );\n\n/**\n * Creates a new diffusion\n * @param {object} diffusion\n * @return {Promise}\n */\nexport const createDiffusion = diffusion =>\n  dataIsValid(diffusion, schema)\n    .then(() => db.insertAsync(diffusion));\n\n/**\n * Updates a diffusion\n * @param {string} id - id of diffusion to update\n * @param {object} diffusion - data to update\n * @return {Promise}\n */\nexport const updateDiffusion = (id, diffusion) =>\n  // validate\n  dataIsValid(diffusion, schema)\n    // get existing document\n    .then(() => db.getAsync(id))\n    // update with new rev\n    .then(diffusionDb =>\n        db.insertAsync({\n          ...diffusion,\n          _rev: diffusionDb._rev\n        }, diffusionDb._id)\n    );\n\n/**\n * Deletes a diffusion\n * @param {object} diffusion - diffusion to delete\n * @return {Promise}\n */\nexport const deleteDiffusion = ({_id}) =>\n  db.getAsync(_id)\n    .then(diffusion => db.destroyAsync(_id, diffusion._rev));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/diffusions/diffusions.dal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "getDiffusions",
    "memberof": "src/components/diffusions/diffusions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.dal.js~getDiffusions",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.dal.js",
    "importStyle": "{getDiffusions}",
    "description": "Gets a list of diffusions with optional query params",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "getDiffusion",
    "memberof": "src/components/diffusions/diffusions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.dal.js~getDiffusion",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.dal.js",
    "importStyle": "{getDiffusion}",
    "description": "Gets a diffusion with a specific id",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "createDiffusion",
    "memberof": "src/components/diffusions/diffusions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.dal.js~createDiffusion",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.dal.js",
    "importStyle": "{createDiffusion}",
    "description": "Creates a new diffusion",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "diffusion",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "updateDiffusion",
    "memberof": "src/components/diffusions/diffusions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.dal.js~updateDiffusion",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.dal.js",
    "importStyle": "{updateDiffusion}",
    "description": "Updates a diffusion",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of diffusion to update"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "diffusion",
        "description": "data to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "deleteDiffusion",
    "memberof": "src/components/diffusions/diffusions.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/diffusions/diffusions.dal.js~deleteDiffusion",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/diffusions/diffusions.dal.js",
    "importStyle": "{deleteDiffusion}",
    "description": "Deletes a diffusion",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "diffusion",
        "description": "diffusion to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/components/diffusions/diffusions.design.js",
    "content": "export default {\n  \"views\": {\n    \"by_id\": {\n      \"map\": `function(doc) {\n                    if (doc.type === 'diffusion') {\n                      emit(doc._id, null);\n                    }\n                  }`\n    }\n  }\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/diffusions/diffusions.design.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/components/diffusions/diffusions.design.spec.js",
    "content": "import {expect} from 'chai';\nimport design from './diffusions.design';\n\ndescribe('Diffusions couchdb design', () => {\n    it('should eval each view map as a function', (done) => {\n        Object.keys(design.views).forEach(id => {\n          const view = design.views[id];\n          expect(eval(`(${view.map})`)).to.be.a('function');\n        });\n        done();\n    });\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/diffusions/diffusions.design.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/components/diffusions/index.js",
    "content": "// diffusion-related db views\nexport design from './diffusions.design';\n// view controller\nexport * as controller from './diffusions.controller';\n// database abstraction layer operations\nexport * as dal from './diffusions.dal';\n// api / routes bindings\nexport api from './diffusions.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/diffusions/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/components/montages/index.js",
    "content": "// montage-related db views\nexport design from './montages.design';\n// view controller\nexport * as controller from './montages.controller';\n// database abstraction layer operations\nexport * as dal from './montages.dal';\n// api / routes bindings\nexport api from './montages.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/montages/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/components/montages/montages.api.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Montage api\n */\n\nimport express from 'express';\n\nimport {\n  getMontages,\n  getMontage,\n  createMontage,\n  updateMontage,\n  deleteMontage\n} from './montages.controller';\n\nconst router = new express.Router();\n\nrouter.get('/', getMontages);\nrouter.get('/:id', getMontage);\nrouter.post('/', createMontage);\nrouter.put('/:id', updateMontage);\nrouter.delete('/:id', deleteMontage);\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/montages/montages.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/components/montages/montages.controller.js",
    "content": "// /**\n//  * Plurishing-backend\n//  * =======\n//  * Montages component controller\n//  */\n\nimport {\n  getMontages as getMontagesDAL,\n  getMontage as getMontageDAL,\n  createMontage as createMontageDAL,\n  updateMontage as updateMontageDAL,\n  deleteMontage as deleteMontageDAL\n} from './montages.dal';\n\n/**\n * Get a list of montages\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n * @todo add filters handling through req queries\n */\nexport const getMontages = (req, res) =>\n  res.json(getMontagesDAL({}));\n\n/**\n * Get a single montage\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const getMontage = (req, res) =>\n  res.json(\n    getMontageDAL({\n      id: req.params.id\n    })\n  );\n\n/**\n * Create a single montage\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const createMontage = (req, res) =>\n  // create the montage\n  createMontageDAL({\n          ...req.body,\n          type: 'montage'\n        })\n  // return the montage\n  .then(({id}) => getMontageDAL({id}))\n  .then(montage => res.json(montage));\n\n/**\n * Update a single montage\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const updateMontage = (req, res) =>\n  res.json(\n    // update the montage\n    updateMontageDAL(\n      req.params.id,\n      req.body, // for now we perform a full replace (vs merge with $set)\n    )\n    // return the montage\n    .then(({id}) => getMontageDAL({id}))\n    .then(montage => res.json(montage))\n  );\n\n/**\n * Delete a single montage\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const deleteMontage = (req, res) =>\n  res.json(deleteMontageDAL({_id: req.params.id}));\n\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/montages/montages.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "getMontages",
    "memberof": "src/components/montages/montages.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.controller.js~getMontages",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.controller.js",
    "importStyle": "{getMontages}",
    "description": "Get a list of montages",
    "lineNumber": 21,
    "todo": [
      "add filters handling through req queries"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "getMontage",
    "memberof": "src/components/montages/montages.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.controller.js~getMontage",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.controller.js",
    "importStyle": "{getMontage}",
    "description": "Get a single montage",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "createMontage",
    "memberof": "src/components/montages/montages.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.controller.js~createMontage",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.controller.js",
    "importStyle": "{createMontage}",
    "description": "Create a single montage",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "updateMontage",
    "memberof": "src/components/montages/montages.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.controller.js~updateMontage",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.controller.js",
    "importStyle": "{updateMontage}",
    "description": "Update a single montage",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "deleteMontage",
    "memberof": "src/components/montages/montages.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.controller.js~deleteMontage",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.controller.js",
    "importStyle": "{deleteMontage}",
    "description": "Delete a single montage",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/components/montages/montages.dal.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Montage data access layer\n */\n\nimport db from '../../utils/plugDb';\n\nimport {Montage as schema} from 'plurishing-schemas';\nimport design from './montages.design';\nimport {addDesign} from '../../utils/couchdb';\nimport {dataIsValid} from '../../utils/schemas';\n\n/**\n * Registering couchdb views related to montages objects\n */\naddDesign(db, 'montages', design);\n\n\n/**\n * Gets a list of montages with optional query params\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getMontages = ({\n  // query = {},\n  include_docs = true\n}) => {\n  return db.viewAsync('montages', 'by_id', {\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n};\n\n/**\n * Gets a montage with a specific id\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getMontage = ({\n  id\n}) =>\n  db.getAsync(id)\n      .then(montage =>\n        // verify that data is compliant before returning it\n        dataIsValid(montage, schema)\n      );\n\n/**\n * Creates a new montage\n * @param {object} montage\n * @return {Promise}\n */\nexport const createMontage = montage =>\n  dataIsValid(montage, schema)\n    .then(() => db.insertAsync(montage));\n\n/**\n * Updates a montage\n * @param {string} id - id of montage to update\n * @param {object} montage - data to update\n * @return {Promise}\n */\nexport const updateMontage = (id, montage) =>\n  // validate\n  dataIsValid(montage, schema)\n    // get existing document\n    .then(() => db.getAsync(id))\n    // update with new rev\n    .then(montageDb =>\n        db.insertAsync({\n          ...montage,\n          _rev: montageDb._rev\n        }, montageDb._id)\n    );\n\n/**\n * Deletes a montage\n * @param {object} montage - montage to delete\n * @return {Promise}\n */\nexport const deleteMontage = ({_id}) =>\n  db.getAsync(_id)\n    .then(montage => db.destroyAsync(_id, montage._rev));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/montages/montages.dal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "getMontages",
    "memberof": "src/components/montages/montages.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.dal.js~getMontages",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.dal.js",
    "importStyle": "{getMontages}",
    "description": "Gets a list of montages with optional query params",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "getMontage",
    "memberof": "src/components/montages/montages.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.dal.js~getMontage",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.dal.js",
    "importStyle": "{getMontage}",
    "description": "Gets a montage with a specific id",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "createMontage",
    "memberof": "src/components/montages/montages.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.dal.js~createMontage",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.dal.js",
    "importStyle": "{createMontage}",
    "description": "Creates a new montage",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "montage",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "updateMontage",
    "memberof": "src/components/montages/montages.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.dal.js~updateMontage",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.dal.js",
    "importStyle": "{updateMontage}",
    "description": "Updates a montage",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of montage to update"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "montage",
        "description": "data to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "deleteMontage",
    "memberof": "src/components/montages/montages.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/montages/montages.dal.js~deleteMontage",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/montages/montages.dal.js",
    "importStyle": "{deleteMontage}",
    "description": "Deletes a montage",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "montage",
        "description": "montage to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/components/montages/montages.design.js",
    "content": "export default {\n  \"views\": {\n    \"by_id\": {\n      \"map\": `function(doc) {\n                    if (doc.type === 'montage') {\n                      emit(doc._id, null);\n                    }\n                  }`\n    }\n  }\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/montages/montages.design.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/components/montages/montages.design.spec.js",
    "content": "import {expect} from 'chai';\nimport design from './montages.design';\n\ndescribe('Montages couchdb design', () => {\n    it('should eval each view map as a function', (done) => {\n        Object.keys(design.views).forEach(id => {\n          const view = design.views[id];\n          expect(eval(`(${view.map})`)).to.be.a('function');\n        });\n        done();\n    });\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/montages/montages.design.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/components/resources/index.js",
    "content": "// resource-related db views\nexport design from './resources.design';\n// view controller\nexport * as controller from './resources.controller';\n// database abstraction layer operations\nexport * as dal from './resources.dal';\n// api / routes bindings\nexport api from './resources.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/resources/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/components/resources/resources.api.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Resource api\n */\n\nimport express from 'express';\n\nimport {\n  getResources,\n  getResource,\n  createResource,\n  updateResource,\n  deleteResource\n} from './resources.controller';\n\nconst router = new express.Router();\n\nrouter.get('/', getResources);\nrouter.get('/:id', getResource);\nrouter.post('/', createResource);\nrouter.put('/:id', updateResource);\nrouter.delete('/:id', deleteResource);\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/resources/resources.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/components/resources/resources.controller.js",
    "content": "// /**\n//  * Plurishing-backend\n//  * =======\n//  * Resources component controller\n//  */\n\nimport {\n  getResources as getResourcesDAL,\n  getResource as getResourceDAL,\n  createResource as createResourceDAL,\n  updateResource as updateResourceDAL,\n  deleteResource as deleteResourceDAL\n} from './resources.dal';\n\n/**\n * Get a list of resources\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n * @todo add filters handling through req queries\n */\nexport const getResources = (req, res) =>\n  res.json(getResourcesDAL({}));\n\n/**\n * Get a single resource\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const getResource = (req, res) =>\n  res.json(\n    getResourceDAL({\n      id: req.params.id\n    })\n  );\n\n/**\n * Create a single resource\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const createResource = (req, res) =>\n  // create the resource\n  createResourceDAL({\n          ...req.body,\n          type: 'resource'\n        })\n  // return the resource\n  .then(({id}) => getResourceDAL({id}))\n  .then(resource => res.json(resource));\n\n/**\n * Update a single resource\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const updateResource = (req, res) =>\n  res.json(\n    // update the resource\n    updateResourceDAL(\n      req.params.id,\n      req.body, // for now we perform a full replace (vs merge with $set)\n    )\n    // return the resource\n    .then(({id}) => getResourceDAL({id}))\n    .then(resource => res.json(resource))\n  );\n\n/**\n * Delete a single resource\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const deleteResource = (req, res) =>\n  res.json(deleteResourceDAL({_id: req.params.id}));\n\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/resources/resources.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "getResources",
    "memberof": "src/components/resources/resources.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.controller.js~getResources",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.controller.js",
    "importStyle": "{getResources}",
    "description": "Get a list of resources",
    "lineNumber": 21,
    "todo": [
      "add filters handling through req queries"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "getResource",
    "memberof": "src/components/resources/resources.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.controller.js~getResource",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.controller.js",
    "importStyle": "{getResource}",
    "description": "Get a single resource",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "createResource",
    "memberof": "src/components/resources/resources.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.controller.js~createResource",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.controller.js",
    "importStyle": "{createResource}",
    "description": "Create a single resource",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "updateResource",
    "memberof": "src/components/resources/resources.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.controller.js~updateResource",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.controller.js",
    "importStyle": "{updateResource}",
    "description": "Update a single resource",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "deleteResource",
    "memberof": "src/components/resources/resources.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.controller.js~deleteResource",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.controller.js",
    "importStyle": "{deleteResource}",
    "description": "Delete a single resource",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "src/components/resources/resources.dal.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Resource data access layer\n */\n\nimport db from '../../utils/plugDb';\n\nimport {Resource as schema} from 'plurishing-schemas';\nimport design from './resources.design';\nimport {addDesign} from '../../utils/couchdb';\nimport {dataIsValid} from '../../utils/schemas';\n\n/**\n * Registering couchdb views related to resources objects\n */\naddDesign(db, 'resources', design);\n\n\n/**\n * Gets a list of resources with optional query params\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getResources = ({\n  // query = {},\n  include_docs = true\n}) => {\n  return db.viewAsync('resources', 'by_id', {\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n};\n\n/**\n * Gets a resource with a specific id or email\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getResource = ({\n  id\n}) =>\n  db.getAsync(id)\n      .then(resource =>\n        // verify that data is compliant before returning it\n        dataIsValid(resource, schema)\n      );\n\n/**\n * Creates a new resource\n * @param {object} resource\n * @return {Promise}\n */\nexport const createResource = resource =>\n  dataIsValid(resource, schema)\n    .then(() => db.insertAsync(resource));\n\n/**\n * Updates a resource\n * @param {string} id - id of resource to update\n * @param {object} resource - data to update\n * @return {Promise}\n */\nexport const updateResource = (id, resource) =>\n  // validate\n  dataIsValid(resource, schema)\n    // get existing document\n    .then(() => db.getAsync(id))\n    // update with new rev\n    .then(resourceDb =>\n        db.insertAsync({\n          ...resource,\n          _rev: resourceDb._rev\n        }, resourceDb._id)\n    );\n\n/**\n * Deletes a resource\n * @param {object} resource - resource to delete\n * @return {Promise}\n */\nexport const deleteResource = ({_id}) =>\n  db.getAsync(_id)\n    .then(resource => db.destroyAsync(_id, resource._rev));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/resources/resources.dal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "getResources",
    "memberof": "src/components/resources/resources.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.dal.js~getResources",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.dal.js",
    "importStyle": "{getResources}",
    "description": "Gets a list of resources with optional query params",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "getResource",
    "memberof": "src/components/resources/resources.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.dal.js~getResource",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.dal.js",
    "importStyle": "{getResource}",
    "description": "Gets a resource with a specific id or email",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "createResource",
    "memberof": "src/components/resources/resources.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.dal.js~createResource",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.dal.js",
    "importStyle": "{createResource}",
    "description": "Creates a new resource",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "resource",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "updateResource",
    "memberof": "src/components/resources/resources.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.dal.js~updateResource",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.dal.js",
    "importStyle": "{updateResource}",
    "description": "Updates a resource",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of resource to update"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "resource",
        "description": "data to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "deleteResource",
    "memberof": "src/components/resources/resources.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/resources/resources.dal.js~deleteResource",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/resources/resources.dal.js",
    "importStyle": "{deleteResource}",
    "description": "Deletes a resource",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "resource",
        "description": "resource to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/components/resources/resources.design.js",
    "content": "export default {\n  \"views\": {\n    \"by_id\": {\n      \"map\": `function(doc) {\n                    if (doc.type === 'resource') {\n                      emit(doc._id, null);\n                    }\n                  }`\n    }\n  }\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/resources/resources.design.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/components/resources/resources.design.spec.js",
    "content": "import {expect} from 'chai';\nimport design from './resources.design';\n\ndescribe('Resources couchdb design', () => {\n    it('should eval each view map as a function', (done) => {\n        Object.keys(design.views).forEach(id => {\n          const view = design.views[id];\n          expect(eval(`(${view.map})`)).to.be.a('function');\n        });\n        done();\n    });\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/resources/resources.design.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/components/users/index.js",
    "content": "// user-related db views\nexport design from './users.design';\n// view controller\nexport * as controller from './users.controller';\n// database abstraction layer operations\nexport * as dal from './users.dal';\n// api / routes bindings\nexport api from './users.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/users/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/components/users/users.api.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * User api\n */\n\nimport express from 'express';\n\nimport {\n  getUsers,\n  getUser,\n  createUser,\n  changeUserPassword,\n  updateUser,\n  deleteUser\n} from './users.controller';\n\nconst router = new express.Router();\n\nrouter.get('/', getUsers);\nrouter.get('/:id', getUser);\nrouter.post('/', createUser);\n// password change is particularly protected (only own user can access it)\nrouter.post('/change-password', changeUserPassword);\nrouter.put('/:id', updateUser);\nrouter.delete('/:id', deleteUser);\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/users/users.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/components/users/users.controller.js",
    "content": "// /**\n//  * Plurishing-backend\n//  * =======\n//  * Users component controller\n//  */\nimport jwt from 'jsonwebtoken'; // used to create, sign, and verify tokens\n\nimport {hash} from '../../utils/crypto';\nimport sendEmail from '../../utils/mailer';\nimport {welcomeEmail} from '../../utils/emails';\n\nimport {\n  getUsers as getUsersDAL,\n  getUser as getUserDAL,\n  createUser as createUserDAL,\n  updateUser as updateUserDAL,\n  deleteUser as deleteUserDAL\n} from './users.dal';\n\nimport {getConfig} from '../../utils/config';\nconst config = getConfig();\n\nconst {\n  // smtpPort,\n  // smtpHost,\n  smtpEmail,\n  smtpService,\n  smtpPassword,\n  secret,\n  backofficeBaseUri\n} = config;\nconst mailConfig = {\n  // smtpPort,\n  // smtpHost,\n  smtpEmail,\n  smtpService,\n  smtpPassword\n};\n\nconst retrieveToken = req => req.body.token || req.params.token || req.headers['x-access-token'];\n\n/**\n * Verifies req is performed by an admin user by inspecting auth token\n * @param {object} req - the request of query\n * @return {Promise} res - resolves if token bearer is an admin\n */\nconst ensureAdmin = (req) =>\n  new Promise((resolve, reject) => {\n    const token = retrieveToken(req);\n    // verify that the token data corresponds to the user willing to change the password\n    jwt.verify(token, secret, function (err, decoded) {\n      if (err) {\n        reject(err);\n      } else if (decoded.admin) {\n        resolve();\n      } else {\n        reject();\n      }\n    });\n  });\n\n/**\n * Verifies req is performed by an admin user or by the user corresponding to id param by inspecting auth token\n * @param {object} req - the request of query\n * @return {Promise} res - resolves if token bearer is an admin or the own user\n */\nconst ensureAdminOrOwn = (req) =>\n  new Promise((resolve, reject) => {\n    const token = retrieveToken(req);\n    // verify that the token data corresponds to the user willing to change the password\n    jwt.verify(token, secret, function (err, decoded) {\n      const admin = decoded.admin;\n      const own = decoded.userid === req.params.id;\n      if (err) {\n        reject(err);\n      } else if (admin || own) {\n        resolve();\n      } else {\n        reject();\n      }\n    });\n  });\n\n/**\n * Get a list of users\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n * @todo add filters handling through req queries\n */\nexport const getUsers = (req, res) =>\n  ensureAdmin(req)\n    .then(() =>\n        res.json(getUsersDAL({}))\n    )\n    .catch(error => res.status(403).json({message: 'admin only', error}));\n\n/**\n * Get a single user\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const getUser = (req, res) =>\n  res.json(\n    getUserDAL({\n      id: req.params.id\n    })\n  );\n\n/**\n * Create a single user\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const createUser = (req, res) =>\n  ensureAdmin(req)\n    .catch(error => res.status(403).json({message: 'admin only', error}))\n    // ensure user does not already exists\n    .then(() =>\n      getUsersDAL({query: {email: req.body.email}})\n    )\n    .then(users => {\n      if (users.length) {\n        return res.status(403).json({message: 'email already exists'});\n      } else {\n        // create user\n        return createUserDAL({\n          ...req.body,\n          type: 'user'\n        });\n      }\n    })\n    .then(({id}) => getUserDAL({id}))\n    .then(user => {\n      // create a token\n      var payload = {\n        admin: user.admin,\n        userid: user._id\n      };\n      var token = jwt.sign(payload, secret, {\n        expiresIn: 86400 // expires in 24 hours\n      });\n      user.resetPasswordToken = token;\n      return updateUserDAL(user._id, user);\n    })\n    .then(({id}) => getUserDAL({id}))\n    .then(user => {\n      const appUrl = backofficeBaseUri;\n      const {subject, html} = welcomeEmail(appUrl, user);\n      return sendEmail({\n        subject,\n        html,\n        to: [user.email]\n      }, mailConfig, req.log);\n    })\n    .then(() => {\n      res.json(getUsersDAL({}));\n    });\n\n/**\n * Update a single user\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const updateUser = (req, res) =>\n  ensureAdminOrOwn(req)\n    .catch(error => res.status(403).json({message: 'admin only', error}))\n    .then(() =>\n      res.json(\n        updateUserDAL(\n          req.params.id,\n          req.body, // for now we perform a full replace (vs merge with $set)\n        )\n      )\n    );\n\n/**\n * Delete a single user\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const deleteUser = (req, res) =>\n  ensureAdmin(req)\n    .catch(error => res.status(403).json({message: 'admin only', error}))\n    .then(() =>\n      res.json(deleteUserDAL({_id: req.params.id}))\n    );\n\n/**\n * Handles password reset (only own user can do that, not even admin)\n * @param {object} req - the request of query\n * @param {object} res - the resource of query\n */\nexport const changeUserPassword = (req, res) => {\n  const {_id, password} = req.body;\n  const token = retrieveToken(req);\n  // verify that the token data corresponds to the user willing to change the password\n  jwt.verify(token, secret, function (err, decoded) {\n    if (err) {\n      res.status(422).json({message: 'Invalid token', error: err});\n    } else if (decoded.userid === _id) {\n      hash(password)\n        .then(hash =>\n          updateUserDAL(\n            // get\n            _id,\n            // set\n            {\n              ...req.body,\n              password: hash,\n              resetPasswordToken: undefined\n            }\n          ))\n          .then(() =>\n            getUserDAL({query: {id: _id}})\n          )\n          .then(user => {\n            if (user) {\n              res.json(user);\n            } else {\n              res.status(404).json({message: 'user not found'});\n            }\n          })\n        .catch(error => res.status(500).json({message: 'error with database.', error}));\n    } else {\n      res.status(403).json({message: 'not allowed to modify password of another user'});\n    }\n  });\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/users/users.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "config",
    "memberof": "src/components/users/users.controller.js",
    "static": true,
    "longname": "src/components/users/users.controller.js~config",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "smtpEmail",
    "memberof": "src/components/users/users.controller.js",
    "static": true,
    "longname": "src/components/users/users.controller.js~smtpEmail",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "mailConfig",
    "memberof": "src/components/users/users.controller.js",
    "static": true,
    "longname": "src/components/users/users.controller.js~mailConfig",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "retrieveToken",
    "memberof": "src/components/users/users.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.controller.js~retrieveToken",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "ensureAdmin",
    "memberof": "src/components/users/users.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.controller.js~ensureAdmin",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": null,
    "description": "Verifies req is performed by an admin user by inspecting auth token",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "res - resolves if token bearer is an admin"
    }
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "ensureAdminOrOwn",
    "memberof": "src/components/users/users.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.controller.js~ensureAdminOrOwn",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": null,
    "description": "Verifies req is performed by an admin user or by the user corresponding to id param by inspecting auth token",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "res - resolves if token bearer is an admin or the own user"
    }
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "getUsers",
    "memberof": "src/components/users/users.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.controller.js~getUsers",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": "{getUsers}",
    "description": "Get a list of users",
    "lineNumber": 90,
    "todo": [
      "add filters handling through req queries"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "getUser",
    "memberof": "src/components/users/users.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.controller.js~getUser",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": "{getUser}",
    "description": "Get a single user",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "createUser",
    "memberof": "src/components/users/users.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.controller.js~createUser",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": "{createUser}",
    "description": "Create a single user",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "updateUser",
    "memberof": "src/components/users/users.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.controller.js~updateUser",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": "{updateUser}",
    "description": "Update a single user",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "deleteUser",
    "memberof": "src/components/users/users.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.controller.js~deleteUser",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": "{deleteUser}",
    "description": "Delete a single user",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "changeUserPassword",
    "memberof": "src/components/users/users.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.controller.js~changeUserPassword",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.controller.js",
    "importStyle": "{changeUserPassword}",
    "description": "Handles password reset (only own user can do that, not even admin)",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request of query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the resource of query"
      }
    ]
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "src/components/users/users.dal.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * User data access layer\n */\n\nimport db from '../../utils/plugDb';\n\nimport {User as schema} from 'plurishing-schemas';\nimport design from './users.design';\nimport {addDesign} from '../../utils/couchdb';\nimport {dataIsValid} from '../../utils/schemas';\n\n/**\n * Registering couchdb views related to users objects\n */\naddDesign(db, 'users', design);\n\n\n/**\n * Gets a list of users with optional query params\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getUsers = ({\n  query = {},\n  include_docs = true\n}) => {\n  if (query.email && query.password) {\n    return db.viewAsync('users', 'by_email_and_password', {\n      key: [query.email, query.password],\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n  } else if (query.email) {\n    return db.viewAsync('users', 'by_email', {\n      key: query.email,\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n  } else {\n    return db.viewAsync('users', 'by_email', {\n      include_docs\n    }).then(\n      results =>\n        new Promise(\n          resolve =>\n            resolve(\n              results.rows.map(doc => doc.doc)\n            )\n          )\n    );\n  }\n};\n\n/**\n * Gets a user with a specific id or email\n * @param {object} parameters\n * @return {Promise}\n */\nexport const getUser = ({\n  id,\n  email\n}) => {\n  if (id) {\n    return db.getAsync(id)\n      .then(user =>\n        // verify that data is compliant before returning it\n        dataIsValid(user, schema)\n      );\n  } else {\n    return db.viewAsync('users', 'by_email', {\n              key: email,\n              include_docs: true\n            })\n            .then(result =>\n              new Promise((resolve, reject) => {\n                if (result.rows && result.rows.length) {\n                  resolve(result.rows[0].doc);\n                } else {\n                  /**\n                   * @todo normalize this error\n                   */\n                  reject(new Error('no match'));\n                }\n              })\n            );\n  }\n};\n\n/**\n * Creates a new user\n * @param {object} user\n * @return {Promise}\n */\nexport const createUser = user =>\n  dataIsValid(user, schema)\n    .then(() => db.insertAsync(user));\n\n/**\n * Updates a user\n * @param {string} id - id of user to update\n * @param {object} user - data to update\n * @return {Promise}\n */\nexport const updateUser = (id, user) =>\n  // validate\n  dataIsValid(user, schema)\n    // get existing document\n    .then(() => db.getAsync(id))\n    // update with new rev\n    .then(userDb =>\n        db.insertAsync({\n          ...user,\n          _rev: userDb._rev\n        }, userDb._id)\n    );\n\n/**\n * Deletes a user\n * @param {object} user - user to delete\n * @return {Promise}\n */\nexport const deleteUser = ({_id}) =>\n  db.getAsync(_id)\n          .then(user => db.destroyAsync(_id, user._rev));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/users/users.dal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "getUsers",
    "memberof": "src/components/users/users.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.dal.js~getUsers",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.dal.js",
    "importStyle": "{getUsers}",
    "description": "Gets a list of users with optional query params",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "getUser",
    "memberof": "src/components/users/users.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.dal.js~getUser",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.dal.js",
    "importStyle": "{getUser}",
    "description": "Gets a user with a specific id or email",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "createUser",
    "memberof": "src/components/users/users.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.dal.js~createUser",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.dal.js",
    "importStyle": "{createUser}",
    "description": "Creates a new user",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "updateUser",
    "memberof": "src/components/users/users.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.dal.js~updateUser",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.dal.js",
    "importStyle": "{updateUser}",
    "description": "Updates a user",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of user to update"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "data to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "deleteUser",
    "memberof": "src/components/users/users.dal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/users/users.dal.js~deleteUser",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/components/users/users.dal.js",
    "importStyle": "{deleteUser}",
    "description": "Deletes a user",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/components/users/users.design.js",
    "content": "export default {\n  \"views\": {\n    \"by_email_and_password\": {\n      \"map\": `function(doc) {\n                    if (doc.type === 'user') {\n                      emit([doc.email, doc.password], null);\n                    }\n                  }`\n    },\n    \"by_email\": {\n      \"map\": `function(doc) {\n                    if (doc.type === 'user') {\n                      emit(doc.email, null);\n                    }\n                  }`\n    },\n    \"by_id\": {\n      \"map\": `function(doc) {\n                    if (doc.type === 'user') {\n                      emit(doc._id, null);\n                    }\n                  }`\n    }\n  }\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/users/users.design.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/components/users/users.design.spec.js",
    "content": "import {expect} from 'chai';\nimport design from './users.design';\n\ndescribe('Users couchdb design', () => {\n    it('should eval each view map as a function', (done) => {\n        Object.keys(design.views).forEach(id => {\n          const view = design.views[id];\n          expect(eval(`(${view.map})`)).to.be.a('function');\n        });\n        done();\n    });\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/components/users/users.design.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/releasers/dynamicpublication/dynamicpublication.controller.js",
    "content": "import {dal as montageDal} from '../../components/montages';\nimport {fetchMontageDependencies} from '../../utils/data';\n\nimport web from '../web';\nimport epub from '../epub';\n\nexport const release = (diffusion) => {\n  return new Promise ((resolve, reject) => {\n    // get related montage\n    montageDal.getMontage({id: diffusion.montage_id})\n      .then(montage => {\n        // fetch montage dependencies\n        return fetchMontageDependencies(montage);\n      })\n      // register all release operations to perform\n      .then(data => {\n        const targets = diffusion.parameters.targets;\n        const operations = targets.map(targetId => {\n          switch(targetId) {\n\n            case 'web':\n              return web(data, diffusion);\n\n            case 'epub':\n              return epub(data, diffusion, 'dynamic');\n\n            default:\n              return Promise.resolve();\n          }\n        });\n        // execute\n        return Promise.all(operations);\n      })\n      .then(resolve)\n      .catch(reject);\n  });\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/dynamicpublication/dynamicpublication.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "release",
    "memberof": "src/releasers/dynamicpublication/dynamicpublication.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/dynamicpublication/dynamicpublication.controller.js~release",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/dynamicpublication/dynamicpublication.controller.js",
    "importStyle": "{release}",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/releasers/dynamicpublication/index.js",
    "content": "export * as controller from './dynamicpublication.controller';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/dynamicpublication/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/releasers/epub/index.js",
    "content": "import {resolve as resolvePath} from 'path';\nimport {readFile} from 'fs-extra';\nimport {readFileSync} from 'fs';\n\nimport generateEpub from './epub.generator';\nimport {dal as deliverableDal} from '../../components/deliverables';\n\nimport {\n  fetchCitationData,\n  mountLocalAssets,\n  unmountLocalAssets\n} from '../../utils/data';\n\nconst tempDirPath = resolvePath(__dirname + '/../../../temp');\nconst styles = readFileSync(resolvePath(__dirname + '/../../../node_modules/plurishing-shared/dist/style.css'), 'utf8');\n\nexport default function publish(data, diffusion, mode = 'static') {\n  return new Promise((resolve, reject) => {\n\n    let deliverable;\n    let getAssetUri;\n\n\n    mountLocalAssets(data.assets)\n    .then(fn => {\n      getAssetUri = asset => {\n        if (asset.mimetype.indexOf('image') > -1) {\n          const path = fn(asset);\n          const image = readFileSync(path, 'base64');\n          return `data:${asset.mimetype};base64,${image}`;\n        } else return fn(asset);\n      };\n      return fetchCitationData();\n    })\n    .then(citationData => {\n      const {citationStyle, citationLocale} = citationData;\n      return generateEpub({\n        // Component,\n        props: data,\n        tempDirPath,\n        outputDirPath: tempDirPath,\n        citationStyle,\n        citationLocale,\n        getAssetUri,\n        mode,\n        styles\n      }, epubPath => {\n        deliverable = {\n          type: 'deliverable',\n          date_produced: new Date().getTime(),\n          diffusion_id: diffusion._id,\n          montage_id: data.montage._id,\n          montage_type: data.montage.metadata.montage_type,\n          montage_title: data.montage.metadata.title,\n          version: diffusion.version,\n          filename: epubPath.split('/').pop(),\n          mimetype: 'application/epub+zip'\n        };\n        return readFile(epubPath)\n          .then(deliverableData => {\n            return deliverableDal.createDeliverable(deliverable, deliverableData);\n          });\n      });\n    })\n    .then(() => unmountLocalAssets(data.assets))\n    .then(resolve)\n    .catch(reject);\n  });\n}\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/epub/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "tempDirPath",
    "memberof": "src/releasers/epub/index.js",
    "static": true,
    "longname": "src/releasers/epub/index.js~tempDirPath",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/epub/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/releasers/epub/index.js",
    "static": true,
    "longname": "src/releasers/epub/index.js~styles",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/epub/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "publish",
    "memberof": "src/releasers/epub/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/epub/index.js~publish",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/epub/index.js",
    "importStyle": "publish",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/releasers/facebook/facebook.releaser.spec.js",
    "content": "import {expect} from 'chai';\nimport {describe, it} from 'mocha';\n\n// tested functions\nimport {\n  status\n} from './index';\n\ndescribe('facebook releaser', () => {\n  /**\n   * @todo find a way to test the part of the module related to fb api\n   * @body it could be handled by negative statements at least\n   */\n  describe('facebook function', () => {\n    const validParams = {\n      access_token: 'mlkjmljlmjmlkj-dmkml-mlkjmlkj',\n    };\n\n    const validContents = {\n      status: 'hello'\n    };\n\n    it('should return a promise', done => {\n      const fn = status(validContents, validParams).catch();\n      expect(fn).to.be.an.instanceof(Promise);\n      done();\n    });\n\n    it('should reject invalid params shape', done => {\n      const invalidParams = {\n        ...validParams,\n        access_token: undefined\n      };\n      status(validContents, invalidParams)\n        .catch(e => {\n          expect(e).to.be.an('array');\n          done();\n        });\n    });\n\n    it('should reject invalid contents shape', done => {\n      const invalidContents = {\n        ...validContents,\n        message: undefined\n      };\n      status(invalidContents, validParams)\n        .catch(e => {\n          expect(e).to.be.an('array');\n          done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/facebook/facebook.releaser.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/releasers/facebook/index.js",
    "content": "/**\n * Multimodal Publishing utils\n * ===========================\n * facebook releaser\n * ===========================\n * This module publishes content to facebook.\n * @module mpu/releasers/facebook\n */\nimport Ajv from 'ajv';\nimport FB from 'fb';\n\nimport facebookStatusSchema from './facebook.status.schema';\nimport facebookParams from './facebook.parameters.schema';\n\nconst ajv = new Ajv();\n\n/**\n * Sends a personal feed's status message\n * @param {object} contents - the contents to send\n * @param {object} params - connection params (credentials, ...)\n * @return {Promise} promise\n */\nexport function status(contents, params) {\n    return new Promise((resolve, reject) => {\n\n        // validate contents object\n        const contentsValidation = ajv.validate(facebookStatusSchema, contents);\n        if (!contentsValidation) {\n          return reject(ajv.errors);\n        }\n\n        // validate params object\n        const paramsValidation = ajv.validate(facebookParams, params);\n        if (!paramsValidation) {\n          return reject(ajv.errors);\n        }\n\n        const {access_token} = params;\n        FB.setAccessToken(access_token);\n        FB.api('me/feed', 'post', contents, function (res) {\n          if(!res || res.error) {\n            reject(res.error);\n            return;\n          }\n          // console.log('Post Id: ' + res.id);\n          resolve();\n        });\n\n        /**\n         * Version with access token retrieval\n         */\n        // console.log('getting access token');\n        // FB.api('oauth/access_token', {\n        //   ...params,\n        //   grant_type: 'client_credentials'\n        // }, function (res) {\n        //     if(!res || res.error) {\n        //         console.log(!res ? 'error occurred' : res.error);\n        //         return;\n        //     }\n        //     const accessToken = res.access_token;\n        //     console.log('got access token', accessToken);\n        //     FB.setAccessToken(accessToken)\n        //     FB.api('me/feed', 'post', contents, function (res) {\n        //       if(!res || res.error) {\n        //         reject(res.error)\n        //         return;\n        //       }\n        //       // console.log('Post Id: ' + res.id);\n        //       resolve();\n        //     });\n        // });\n\n    });\n}\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/facebook/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "ajv",
    "memberof": "src/releasers/facebook/index.js",
    "static": true,
    "longname": "src/releasers/facebook/index.js~ajv",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/facebook/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "status",
    "memberof": "src/releasers/facebook/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/facebook/index.js~status",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/facebook/index.js",
    "importStyle": "{status}",
    "description": "Sends a personal feed's status message",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "the contents to send"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "connection params (credentials, ...)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise"
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/releasers/mailing/index.js",
    "content": "/**\n * Multimodal Publishing utils\n * ===========================\n * mailing releaser\n * ===========================\n * This module publishes content to mailing.\n * @module mpu/releasers/mailing\n */\nexport mail from './mail';\n\nexport montageToMail from './montageToMail';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/mailing/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/releasers/mailing/mail.js",
    "content": "import sendEmail from '../../utils/mailer';\n\nimport Ajv from 'ajv';\n\nimport mailContentsSchema from './mailing.contents.schema';\nimport paramsSchema from './mailing.parameters.schema';\n\nconst ajv = new Ajv();\n\n/**\n * @param {object} contents - the contents to send\n * @param {object} params - connection params (credentials, ...)\n * @return {Promise} promise\n */\nexport default function mail(contents, params) {\n    return new Promise((resolve, reject) => {\n        // validate contents object\n        const contentsValidation = ajv.validate(mailContentsSchema, contents);\n        if (!contentsValidation) {\n          return reject(ajv.errors);\n        }\n\n        // validate params object\n        const paramsValidation = ajv.validate(paramsSchema, params);\n        if (!paramsValidation) {\n          return reject(ajv.errors);\n        }\n        const {\n          from,\n          to,\n          subject,\n          html\n        } = contents;\n\n        const {\n          smtp_email,\n          smtp_service,\n          smtp_password\n        } = params;\n\n        sendEmail({\n          from,\n          to, // array\n          subject,\n          html\n        }, {\n          smtpEmail: smtp_email,\n          smtpService: smtp_service,\n          smtpPassword: smtp_password\n        }, console)/* eslint no-console : 0 */\n        .then(resolve)\n        .catch(reject);\n    });\n}\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/mailing/mail.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "ajv",
    "memberof": "src/releasers/mailing/mail.js",
    "static": true,
    "longname": "src/releasers/mailing/mail.js~ajv",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/mailing/mail.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "mail",
    "memberof": "src/releasers/mailing/mail.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/mailing/mail.js~mail",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/mailing/mail.js",
    "importStyle": "mail",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "the contents to send"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "connection params (credentials, ...)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise"
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/releasers/mailing/maling.releaser.spec.js",
    "content": "",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/mailing/maling.releaser.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/releasers/micropublication/index.js",
    "content": "export * as controller from './micropublication.controller';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/micropublication/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/releasers/micropublication/micropublication.controller.js",
    "content": "/* eslint security/detect-object-injection : 0 */\nimport {resolve as resolvePath} from 'path';\nimport {readFile, remove} from 'fs-extra';\n\nimport {v4 as genId} from 'uuid';\n\nimport {dal as assetDal} from '../../components/assets';\nimport {dal as montageDal} from '../../components/montages';\nimport {dal as compositionDal} from '../../components/compositions';\n\nimport  {service as html2img} from '../../services/html2img';\n\nimport {tweet, montageToTweet} from '../twitter';\nimport {mail, montageToMail} from '../mailing';\n\nimport {getConfig} from '../../utils/config';\nconst {\n  twitter_consumer_key,\n  twitter_consumer_secret,\n  twitter_access_token,\n  twitter_access_token_secret,\n\n  smtpService,\n  smtpEmail,\n  smtpPassword,\n  mailingHubEmail,\n\n  serverUri\n  // facebook_access_token\n} = getConfig();\n\nconst twitterConfig = {\n consumer_key: twitter_consumer_key,\n consumer_secret: twitter_consumer_secret,\n access_token: twitter_access_token,\n access_token_secret: twitter_access_token_secret\n};\n\nconst mailConfig = {\n  smtp_service: smtpService,\n  smtp_password: smtpPassword,\n  smtp_email: smtpEmail,\n  mailing_hub_email: mailingHubEmail\n};\n\n/**\n * @todo refactor as shared util\n */\nconst renderAbstractAsHtml = composition => {\n  const abstr = composition && composition.metadata.abstract_original;\n  if (abstr) {\n    return `<html>\n    <head>\n      <style>\n        *{background: white; color: black;}\n      </style>\n    </head>\n    <body><p>${abstr}</p></body></html>`;\n  }\n  return '';\n};\n\nexport const release = (diffusion) => {\n  return new Promise ((resolve, reject) => {\n    let montage;\n    let composition;\n    let assets = {};\n    // fetch montage\n    montageDal\n      .getMontage({id: diffusion.montage_id})\n      // fetch composition demendency\n      .then(thatMontage => {\n        montage = thatMontage;\n        const compositionId = montage.data.target_composition_id;\n        return compositionDal.getComposition({id: compositionId});\n      })\n    // fetch resource dependencies\n    .then(thatComposition => {\n      composition = thatComposition;\n      const resources = montage.resources;\n      if (resources) {\n        // do stuff to fetch them\n        /**\n         * @todo implement resource fetching when adding resources images in micropublication\n         */\n      } else {\n        return Promise.resolve();\n      }\n    })\n    // fetch assets dependencies\n    .then(() => {\n      const operations = [];\n      // produce abstract image ?\n      if (montage.data.include_abstract && diffusion.parameters.targets.indexOf('twitter') > -1) {\n        const html = renderAbstractAsHtml(composition);\n        const absPath = __dirname + '/../../../temp/' + genId() + '.jpg';\n        const path = resolvePath(absPath);\n        operations.push(\n          new Promise((reso, rej) => /* eslint promise/param-names : 0 */\n            html2img(html, path, err => {\n              if (err) {\n                return rej(err);\n              } else {\n                readFile(path, 'base64')\n                  .then(base64 => {\n                    assets.abstractImageUri = base64;\n                    return remove(path);\n                  })\n                  .then(reso);\n              }\n            })\n          )\n        );\n      }\n      if (montage.data.attached_assets && montage.data.attached_assets.length) {\n        montage.data.attached_assets.forEach(citation => {\n          const {image_asset_id: imageAssetId} = citation;\n          operations.push(\n            new Promise((reso, rej) => { /* eslint promise/param-names : 0 */\n              let asset;\n              assetDal.getAsset({\n                id: imageAssetId\n              })\n              .then(ass => {\n                asset = ass;\n                return assetDal.getAssetAttachment({\n                  id: ass._id,\n                  filename: ass.filename,\n                  encoding: 'base64'\n                });\n              })\n              .then(resp => {\n                assets[imageAssetId] = {\n                  url: `${serverUri}/api/assets/${asset._id}/${asset.filename}`,\n                  base64: resp.data\n                };\n                return Promise.resolve();\n              })\n              .then(reso)\n              .catch(rej);\n            })\n          );\n        });\n      }\n      return Promise.all(operations);\n    })\n    // register release operations to perform\n    .then(() => {\n      // execute\n      const targets = diffusion.parameters.targets;\n\n      const operations = targets.map(targetId => {\n        let tweetContents;\n        let mailContents;\n        const urledAssets = Object.keys(assets).reduce((total, key) => ({\n          ...total,\n          [key]: assets[key].url\n        }), {});\n        switch(targetId) {\n          case 'twitter':\n            tweetContents = montageToTweet(montage, composition, assets);\n            return tweet(tweetContents, twitterConfig);\n\n          case 'mailing':\n            mailContents = montageToMail(montage, composition, urledAssets, mailConfig);\n            return mail(mailContents, mailConfig);\n          case 'facebook':\n          default:\n            return Promise.resolve();\n        }\n      });\n      return Promise.all(operations);\n    })\n    .then(resolve)\n    .catch(reject);\n  });\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/micropublication/micropublication.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "twitter_consumer_key",
    "memberof": "src/releasers/micropublication/micropublication.controller.js",
    "static": true,
    "longname": "src/releasers/micropublication/micropublication.controller.js~twitter_consumer_key",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/micropublication/micropublication.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "twitterConfig",
    "memberof": "src/releasers/micropublication/micropublication.controller.js",
    "static": true,
    "longname": "src/releasers/micropublication/micropublication.controller.js~twitterConfig",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/micropublication/micropublication.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "mailConfig",
    "memberof": "src/releasers/micropublication/micropublication.controller.js",
    "static": true,
    "longname": "src/releasers/micropublication/micropublication.controller.js~mailConfig",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/micropublication/micropublication.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "renderAbstractAsHtml",
    "memberof": "src/releasers/micropublication/micropublication.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/micropublication/micropublication.controller.js~renderAbstractAsHtml",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/micropublication/micropublication.controller.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 49,
    "todo": [
      "refactor as shared util"
    ]
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "release",
    "memberof": "src/releasers/micropublication/micropublication.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/micropublication/micropublication.controller.js~release",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/micropublication/micropublication.controller.js",
    "importStyle": "{release}",
    "description": null,
    "lineNumber": 63,
    "undocument": true
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/releasers/pdf/index.js",
    "content": "import {resolve as resolvePath} from 'path';\nimport {readFile} from 'fs-extra';\nimport {readFileSync} from 'fs';\n\n/**\n * @todo use proper component to render pdf view\n */\nimport Component from 'plurishing-shared/dist/components/previews/StaticMontagePreview/PreviewContainer';\n\n\nimport {\n  fetchCitationData,\n  mountLocalAssets,\n  unmountLocalAssets\n} from '../../utils/data';\n\nimport generatePdf from './pdf.generator';\nimport {dal as deliverableDal} from '../../components/deliverables';\n\n\nconst tempDirPath = resolvePath(__dirname + '/../../../temp');\nconst styles = readFileSync(resolvePath(__dirname + '/../../../node_modules/plurishing-shared/dist/style.css'), 'utf8');\n\n\nexport default function publish(data, diffusion) {\n  return new Promise((resolve, reject) => {\n\n\n    let deliverable;\n    let getAssetUri;\n\n    mountLocalAssets(data.assets)\n    .then(fn => {\n      getAssetUri = fn;\n      return fetchCitationData();\n    })\n    .then(citationData => {\n      const {citationStyle, citationLocale} = citationData;\n      return generatePdf({\n        Component,\n        props: data,\n        tempDirPath,\n        outputDirPath: tempDirPath,\n        citationLocale,\n        citationStyle,\n        getAssetUri,\n        styles\n      }, pdfPath => {\n        deliverable = {\n          type: 'deliverable',\n          date_produced: new Date().getTime(),\n          diffusion_id: diffusion._id,\n          montage_id: data.montage._id,\n          montage_type: data.montage.metadata.montage_type,\n          montage_title: data.montage.metadata.title,\n          version: diffusion.version,\n          filename: pdfPath.split('/').pop(),\n          mimetype: 'application/pdf'\n        };\n        return readFile(pdfPath)\n          .then(deliverableData => {\n            return deliverableDal.createDeliverable(deliverable, deliverableData);\n          });\n      });\n    })\n    .then(() => unmountLocalAssets(data.assets))\n    .then(resolve)\n    .catch(reject);\n  });\n}\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/pdf/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "tempDirPath",
    "memberof": "src/releasers/pdf/index.js",
    "static": true,
    "longname": "src/releasers/pdf/index.js~tempDirPath",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/pdf/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/releasers/pdf/index.js",
    "static": true,
    "longname": "src/releasers/pdf/index.js~styles",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/pdf/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "publish",
    "memberof": "src/releasers/pdf/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/pdf/index.js~publish",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/pdf/index.js",
    "importStyle": "publish",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/releasers/staticpublication/index.js",
    "content": "export * as controller from './staticpublication.controller';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/staticpublication/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/releasers/staticpublication/staticpublication.controller.js",
    "content": "import {dal as montageDal} from '../../components/montages';\nimport {fetchMontageDependencies} from '../../utils/data';\n\nimport pdf from '../pdf';\nimport epub from '../epub';\n\nexport const release = (diffusion) => {\n  return new Promise ((resolve, reject) => {\n    // get related montage\n    montageDal.getMontage({id: diffusion.montage_id})\n      .then(montage => {\n        // fetch montage dependencies\n        return fetchMontageDependencies(montage);\n      })\n      // register all release operations to perform\n      .then(data => {\n        const targets = diffusion.parameters.targets;\n        const operations = targets.map(targetId => {\n          switch(targetId) {\n\n            case 'pdf':\n              return pdf(data, diffusion);\n\n            case 'epub':\n              return epub(data, diffusion, 'static');\n\n            default:\n              return Promise.resolve();\n          }\n        });\n        // execute\n        return Promise.all(operations);\n      })\n      .then(resolve)\n      .catch(reject);\n  });\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/staticpublication/staticpublication.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "release",
    "memberof": "src/releasers/staticpublication/staticpublication.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/staticpublication/staticpublication.controller.js~release",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/staticpublication/staticpublication.controller.js",
    "importStyle": "{release}",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/releasers/twitter/index.js",
    "content": "/**\n * Multimodal Publishing utils\n * ===========================\n * twitter releaser\n * ===========================\n * This module publishes content to twitter.\n * @module mpu/releasers/twitter\n */\nexport tweet from './tweet';\n\nexport montageToTweet from './montageToTweet';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/twitter/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/releasers/twitter/montageToTweet.js",
    "content": "\n\nconst TEXT_LIMIT = 280;\n\nconst makeText = (title, link, creators) => {\n  const creatorsStr = creators.reduce((str, creator, index) =>\n    str\n    + (creator.given ? creator.given : '')\n    + (creator.given && creator.family ? ' ' : '')\n    + (creator.family ? creator.family : '')\n    + (index === creators.length - 1 ? '' : ' & ')\n    , '');\n\n  const vals = [title, link, creatorsStr];\n  let txt = '';\n  vals.forEach(val => {\n    if (val && (txt + ' ' + val).length <= TEXT_LIMIT) {\n      txt += ' ' + val;\n    }\n  });\n  return txt;\n};\n\n\n\nexport default function montageToTweet (montage, composition, assets) {\n  const {\n    data: {\n      link,\n      include_abstract,\n      attached_assets\n    }\n  } = montage;\n  const {\n    metadata: {\n      title,\n      creators\n    }\n  } = composition;\n\n  const {\n    abstractImageUri\n  } = assets;\n  const status = makeText(title, link, creators);\n  const media = (include_abstract && abstractImageUri) ?\n          [{\n              type: 'image',\n              description: 'abstract image',\n              uri: abstractImageUri\n          }] : [];\n  if (attached_assets) {\n    attached_assets.forEach(citation => {\n      const {image_asset_id} = citation;\n      /**\n       * @todo investigate possible security issue\n       * @body security linter throws a warning for the following line\n       */\n      const uri = assets[image_asset_id].base64;/* eslint security/detect-object-injection : 0 */\n      media.push({\n        type: 'image',\n        description: 'attached image',\n        uri\n      });\n    });\n  }\n  return {\n    status,\n    media\n  };\n}\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/twitter/montageToTweet.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "TEXT_LIMIT",
    "memberof": "src/releasers/twitter/montageToTweet.js",
    "static": true,
    "longname": "src/releasers/twitter/montageToTweet.js~TEXT_LIMIT",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/twitter/montageToTweet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "makeText",
    "memberof": "src/releasers/twitter/montageToTweet.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/twitter/montageToTweet.js~makeText",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/twitter/montageToTweet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "montageToTweet",
    "memberof": "src/releasers/twitter/montageToTweet.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/twitter/montageToTweet.js~montageToTweet",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/twitter/montageToTweet.js",
    "importStyle": "montageToTweet",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/releasers/twitter/tweet.js",
    "content": "/* eslint  promise/param-names : 0 */\n\nimport Ajv from 'ajv';\nimport T from 'twit';\n\nimport tweetContentsSchema from './tweet.contents.schema';\nimport paramsSchema from './twitter.parameters.schema';\n\nconst ajv = new Ajv();\n\n/**\n * @param {object} contents - the contents to send\n * @param {object} params - connection params (credentials, ...)\n * @return {Promise} promise\n */\nexport default function tweet(contents, params) {\n    return new Promise((resolve, reject) => {\n        // validate contents object\n        const contentsValidation = ajv.validate(tweetContentsSchema, contents);\n        if (!contentsValidation) {\n          return reject(ajv.errors);\n        }\n\n        // validate params object\n        const paramsValidation = ajv.validate(paramsSchema, params);\n        if (!paramsValidation) {\n          return reject(ajv.errors);\n        }\n\n        // connect to api\n        const client = new T(params);\n\n        // tweet with media attachment\n        if (contents.media) {\n          const mediaIds = [];\n          const toResolve = contents.media.map(media =>\n            new Promise((reso, rej) => {\n              // -> we use the base64 uri provided if any\n              if (media.type === 'image') {\n                const {\n                  uri,\n                  description\n                } = media;\n\n                // ensure the uri is base64 data\n                /**\n                 * @todo: fix base64 uri validator to validate base64 images\n                 */\n                // const uriValid = isBase64(uri);\n                // if (!uriValid) {\n                //   return reject(new Error());\n                // }\n\n                // post the media to Twitter\n                client.post('media/upload', { media_data: uri }, function (err, data /* , response */) {\n                  if (err) {\n                    return rej(err);\n                  } else {\n                    // assign alt text to the media, for use by screen readers and\n                    // other text-based presentations and interpreters\n                    const mediaIdStr = data.media_id_string;\n                    const meta_params = {\n                      media_id: mediaIdStr,\n                      alt_text: {\n                        text: description\n                      }\n                    };\n\n                    // create metadata for media\n                    client.post('media/metadata/create', meta_params, (err/* , data, response */) => {\n                      if (err) {\n                        return rej(err);\n                      } else {\n                        mediaIds.push(mediaIdStr);\n                        reso();\n                      }\n                    });\n                  }\n                });\n              }\n            })\n          );\n          Promise.all(toResolve)\n            .then(() => {\n              // update contents with proper media\n              const enrichedContents = {\n                ...contents,\n                media: undefined,\n                media_ids: [mediaIds]\n              };\n              // eventually tweet\n              client.post('statuses/update', enrichedContents, (err/* , data, response */) => {\n                if (err) {\n                  return reject(err);\n                } else {\n                  return resolve();\n                }\n              });\n            });\n        // case simple tweet\n        } else {\n          client.post('statuses/update', contents, (err/* , data, response */) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        }\n    });\n}\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/twitter/tweet.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "ajv",
    "memberof": "src/releasers/twitter/tweet.js",
    "static": true,
    "longname": "src/releasers/twitter/tweet.js~ajv",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/twitter/tweet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "tweet",
    "memberof": "src/releasers/twitter/tweet.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/twitter/tweet.js~tweet",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/twitter/tweet.js",
    "importStyle": "tweet",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "the contents to send"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "connection params (credentials, ...)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise"
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/releasers/twitter/twitter.releaser.spec.js",
    "content": "import {expect} from 'chai';\nimport {describe, it} from 'mocha';\n\n// tested function\nimport {tweet} from './index';\n\ndescribe('twitter releaser', () => {\n  /**\n   * @todo find a way to test the part of the module related to twit api\n   * @body it could be handled by negative statements at least\n   */\n  describe('tweet function', () => {\n    const validParams = {\n      consumer_key: 'coucou',\n      consumer_secret: 'haha',\n      access_token: 'mlkjmljlmjmlkj-dmkml-mlkjmlkj',\n      access_token_secret: 'mlkmljk mlkj mlkj mlkj mlkj mlkjm lkj '\n    };\n\n    const validContents = {\n      status: 'hello'\n    };\n\n    it('should return a promise', done => {\n      const fn = tweet(validContents, validParams).catch();\n      expect(fn).to.be.an.instanceof(Promise);\n      done();\n    });\n\n    it('should reject invalid params shape', done => {\n      const invalidParams = {\n        ...validParams,\n        consumer_key: undefined\n      };\n      tweet(validContents, invalidParams)\n        .catch(e => {\n          expect(e).to.be.an('array');\n          done();\n        });\n    });\n\n    it('should reject invalid contents shape', done => {\n      const invalidContents = {\n        ...validContents,\n        status: undefined\n      };\n      tweet(invalidContents, validParams)\n        .catch(e => {\n          expect(e).to.be.an('array');\n          done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/twitter/twitter.releaser.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/releasers/web/index.js",
    "content": "import {post} from 'axios';\n\nimport {getConfig} from '../../utils/config';\nimport {hash} from '../../utils/crypto';\nconst {\n  websiteBuilderUri,\n  secret\n} = getConfig();\n\n\n\nexport default function publish(data, diffusion) {\n  return hash(secret)\n          .then(pwd => {\n            const endpoint = `${websiteBuilderUri}/update`;\n            // send new data\n            return post(endpoint, {data, diffusion, pwd});\n          });\n}\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/releasers/web/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "websiteBuilderUri",
    "memberof": "src/releasers/web/index.js",
    "static": true,
    "longname": "src/releasers/web/index.js~websiteBuilderUri",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/releasers/web/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "publish",
    "memberof": "src/releasers/web/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/releasers/web/index.js~publish",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/releasers/web/index.js",
    "importStyle": "publish",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/server.js",
    "content": "// import fs from 'fs';\n// import https from 'https';\n/* eslint no-console : 0 */\nimport app from './app';\n\n/**\n * Connect config\n */\nimport {getConfig} from './utils/config';\nconst config = getConfig();\nconst {\n  port\n  // key, csr, cert\n} = config;\n\n/**\n * ===============\n * HTTPS Connection\n * ===============\n */\n\n// /**\n//  * Prepare https certificate\n//  */\n// const options = {\n//   key,\n//   ca: csr,\n//   cert\n// };\n\n// /**\n//  * Launch server\n//  */\n// https.createServer(options, app).listen(port, null, function () {\n//   console.log('Server listening on port %d in %s mode', this.address().port, app.settings.env);\n// });\n\n\n/**\n * ===============\n * HTTP Connection\n * ===============\n */\n\napp.listen(port, null, function () {\n  console.log('Server listening on port %d in %s mode', this.address().port, app.settings.env);\n});\n\n\n\n\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/server.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "config",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~config",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "port",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~port",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/services/data-provider/data-provider.api.js",
    "content": "\n/**\n * Plurishing-backend\n * =======\n * Data provider api\n */\n\nimport express from 'express';\n\nimport {getMontageData, getAssetAttachmentUrl} from './data-provider.controller';\n\nconst router = new express.Router();\n\nrouter.get('/montage/:id', getMontageData);\nrouter.get('/asset/:id', getAssetAttachmentUrl);\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/data-provider/data-provider.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/services/data-provider/data-provider.controller.js",
    "content": "\nimport {dal as montageDal} from '../../components/montages';\nimport {fetchMontageDependencies} from '../../utils/data';\n\n\n\nexport const getAssetAttachmentUrl = (req, res) => {\n  return res.send('');\n};\n\n\nexport const getMontageData = (req, res) => {\n  const id = req.params.id;\n  montageDal.getMontage({id})\n      .then(montage => {\n        // fetch montage dependencies\n        return fetchMontageDependencies(montage);\n      })\n      // register all release operations to perform\n      .then(data => {\n        return res.json(data);\n      })\n      .catch(e => res.status(500).send(e));\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/data-provider/data-provider.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "getAssetAttachmentUrl",
    "memberof": "src/services/data-provider/data-provider.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/data-provider/data-provider.controller.js~getAssetAttachmentUrl",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/services/data-provider/data-provider.controller.js",
    "importStyle": "{getAssetAttachmentUrl}",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "getMontageData",
    "memberof": "src/services/data-provider/data-provider.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/data-provider/data-provider.controller.js~getMontageData",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/services/data-provider/data-provider.controller.js",
    "importStyle": "{getMontageData}",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/services/data-provider/index.js",
    "content": "export router from './data-provider.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/data-provider/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/services/dump/dump.api.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Dump api\n */\n\nimport express from 'express';\n\nimport {\n  downloadAllData,\n  uploadData,\n  deleteAllData\n} from './dump.controller';\n\nconst router = new express.Router();\n\nrouter.get('/', downloadAllData);\nrouter.post('/', uploadData);\nrouter.delete('/', deleteAllData);\n\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/dump/dump.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "src/services/dump/dump.controller.js",
    "content": "/* eslint promise/param-names : 0 */\n\nimport archiver from 'archiver';\nimport {ensureDir, remove, writeFile, readFile} from 'fs-extra';\nimport {createWriteStream, createReadStream} from 'fs';\nimport unzipper from 'unzipper';\nimport {resolve as resolvePath} from 'path';\nimport formidable from 'formidable';\n\nimport {dal as assetDal} from '../../components/assets';\nimport {dal as resourceDal} from '../../components/resources';\nimport {dal as compositionDal} from '../../components/compositions';\nimport {dal as montageDal} from '../../components/montages';\nimport {dal as diffusionDal} from '../../components/diffusions';\nimport {dal as deliverableDal} from '../../components/deliverables';\n\nconst tempFolder = resolvePath(__dirname + '/../../../temp/');\nconst dumpFolder = `${tempFolder}/dump/`;\nconst zipDest = `${tempFolder}/dump.zip`;\n\n\nexport const downloadAllData = (req, res) =>\n  new Promise((resolve, reject) => {\n    const data = {};\n\n    // ensure temp folder structure is set\n    remove(dumpFolder)\n      .then(() => ensureDir(dumpFolder))\n      .then(() => ensureDir(`${dumpFolder}/data`))\n      .then(() => ensureDir(`${dumpFolder}/assets`))\n      .then(() => ensureDir(`${dumpFolder}/deliverables`))\n      .then(() => assetDal.getAssets({}))\n      // get assets\n      .then(assets => {\n        data.assets = assets;\n        // download assets attachments\n        const attachments = assets.map(asset => {\n          return new Promise((resolve2, reject2) => {\n            assetDal.getAssetAttachment({\n              id: asset._id,\n              filename: asset.filename\n            })\n            .then(attachment => {\n              const folderPath = `${dumpFolder}/assets/${asset._id}`;\n              const path = `${folderPath}/${asset.filename}`;\n              return ensureDir(folderPath)\n                      .then(() => writeFile(path, attachment.data, 'binary'));\n            })\n            .then(resolve2)\n            .catch(reject2);\n          });\n        });\n        return Promise.all(attachments);\n    })\n    // get other objects\n    .then(() => {\n      return resourceDal.getResources({});\n    })\n    .then(resources => {\n      data.resources = resources;\n      return compositionDal.getCompositions({});\n    })\n    .then(compositions => {\n      data.compositions = compositions;\n      return montageDal.getMontages({});\n    })\n    .then(montages => {\n      data.montages = montages;\n      return diffusionDal.getDiffusions({});\n    })\n    .then(diffusions => {\n      data.diffusions = diffusions;\n      return deliverableDal.getDeliverables({});\n    })\n    // get deliverables\n    .then(deliverables => {\n      data.deliverables = deliverables;\n      // download deliverables attachments\n      const attachments = deliverables.map(deliverable => {\n          return new Promise((resolve2, reject2) => {\n            deliverableDal.getDeliverableAttachment({\n              id: deliverable._id,\n              filename: deliverable.filename\n            })\n            .then(attachment => {\n              const folderPath = `${dumpFolder}/deliverables/${deliverable._id}`;\n              const path = `${folderPath}/${deliverable.filename}`;\n              return ensureDir(folderPath)\n                      .then(() => writeFile(path, attachment.data, 'binary'));\n            })\n            .then(resolve2)\n            .catch(reject2);\n          });\n        });\n      return Promise.all(attachments);\n    })\n    // write data\n    .then(() => {\n      const dest = `${dumpFolder}/data/data.json`;\n      return writeFile(dest, JSON.stringify(data), 'utf8');\n    })\n    // zip file\n    .then(() => {\n      return new Promise((resolve2, reject2) => {\n        const output = createWriteStream(zipDest);\n        const archive = archiver('zip', {\n          zlib: { level: 9 } // Sets the compression level.\n        });\n        output.on('close', function() {\n          // console.log(archive.pointer() + ' total bytes');\n          // console.log('archiver has been finalized and the output file descriptor has closed.');\n          resolve2();\n        });\n\n        // This event is fired when the data source is drained no matter what was the data source.\n        // It is not part of this library but rather from the NodeJS Stream API.\n        // @see: https://nodejs.org/api/stream.html#stream_event_end\n        output.on('end', function() {\n          resolve2();\n        });\n\n\n        // good practice to catch warnings (ie stat failures and other non-blocking errors)\n        archive.on('warning', function(err) {\n          if (err.code === 'ENOENT') {\n            // log warning\n          } else {\n            // throw error\n            reject2(err);\n          }\n        });\n\n        // good practice to catch this error explicitly\n        archive.on('error', function(err) {\n          reject2(err);\n        });\n\n        // pipe archive data to the file\n        archive.pipe(output);\n\n        // add folder to archive\n        archive.directory(dumpFolder, false);\n        archive.finalize();\n      });\n    })\n    .then(() => {\n      return readFile(zipDest);\n    })\n    // return zip\n    .then(file => {\n      return res.end(file, 'binary');\n    })\n    .then(resolve)\n    .catch(reject);\n  });\n\nconst clearAllData = () =>\n    assetDal.getAssets({})\n      .then(assets =>\n        Promise.all(assets.map(asset => assetDal.deleteAsset({_id: asset._id})))\n      )\n      .then(() => resourceDal.getResources({}))\n      .then(resources =>\n        Promise.all(resources.map(resource => resourceDal.deleteResource({_id: resource._id})))\n      )\n      .then(() => compositionDal.getCompositions({}))\n      .then(compositions =>\n        Promise.all(compositions.map(composition => compositionDal.deleteComposition({_id: composition._id})))\n      )\n      .then(() => montageDal.getMontages({}))\n      .then(montages =>\n        Promise.all(montages.map(montage => montageDal.deleteMontage({_id: montage._id})))\n      )\n      .then(() => diffusionDal.getDiffusions({}))\n      .then(diffusions =>\n        Promise.all(diffusions.map(diffusion => diffusionDal.deleteDiffusion({_id: diffusion._id})))\n      )\n      .then(() => deliverableDal.getDeliverables({}))\n      .then(deliverables =>\n        Promise.all(deliverables.map(deliverable => deliverableDal.deleteDeliverable({_id: deliverable._id})))\n      );\n\nexport const uploadData = (req, res) =>\n  // remove dump folder as we are going to replace it\n  remove(dumpFolder)\n    // clear all previous data\n    .then(() => clearAllData())\n    // store the zip dump file in temp dir\n    .then(() => {\n      return new Promise((resolve, reject) => {\n        const form = new formidable.IncomingForm({\n          uploadDir : tempFolder,\n          // multiples : true,\n          keepExtensions : true\n        });\n\n        form.on('error', function(err){\n          return reject(err);\n        });\n\n\n        form.parse(req, function(err, fields, files) {\n          if (err) {\n            return reject(err);\n          } else {\n            const attachmentPath = files.file.path;\n            return resolve(attachmentPath);\n          }\n        });\n      });\n    })\n    // unzip file to dump folder\n    .then(attachmentPath =>\n        createReadStream(attachmentPath)\n        .pipe(unzipper.Extract({path: dumpFolder}))\n        .promise()\n    )\n    // load data\n    .then(() => readFile(`${dumpFolder}data/data.json`, 'utf8'))\n    .then(raw =>\n      new Promise((resolve, reject) => {\n        try {\n          const data = JSON.parse(raw);\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      })\n    )\n    // create all objects\n    .then(data => {\n      const cleanRev = doc => {\n        delete doc._rev;\n        if (doc.type === 'asset' || doc.type === 'deliverable') {\n          // delete attachment\n          delete doc._attachments;\n        }\n        return doc;\n      };\n      const operations = [\n        ...data.assets.map(asset => {\n          const fileName = asset.filename;\n          const attachmentPath = `${dumpFolder}assets/${asset._id}/${fileName}`;\n          return readFile(attachmentPath)\n                  .then(data => assetDal.createAsset(cleanRev(asset), data));\n        }),\n        ...data.resources.map(resource =>\n          resourceDal.createResource(cleanRev(resource))\n        ),\n        ...data.compositions.map(composition =>\n          compositionDal.createComposition(cleanRev(composition))\n        ),\n        ...data.montages.map(montage =>\n          montageDal.createMontage(cleanRev(montage))\n        ),\n        ...data.diffusions.map(diffusion =>\n          diffusionDal.createDiffusion(cleanRev(diffusion))\n        ),\n        ...data.deliverables.map(deliverable => {\n          const fileName = deliverable.filename;\n          const attachmentPath = `${dumpFolder}deliverables/${deliverable._id}/${fileName}`;\n          return readFile(attachmentPath)\n                  .then(data => deliverableDal.createDeliverable(cleanRev(deliverable), data));\n        })\n      ];\n\n      return Promise.all(operations);\n    })\n    .then(() => res.json({status: 'ok'}))\n    .catch(e => {\n      res.status(500).send(e);\n    });\n\nexport const deleteAllData = (req, res) =>\n  clearAllData()\n    .then(() => {\n      return res.json({status: 'ok'});\n    })\n    .catch(e => res.status(500).send(e));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/dump/dump.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "tempFolder",
    "memberof": "src/services/dump/dump.controller.js",
    "static": true,
    "longname": "src/services/dump/dump.controller.js~tempFolder",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/services/dump/dump.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "dumpFolder",
    "memberof": "src/services/dump/dump.controller.js",
    "static": true,
    "longname": "src/services/dump/dump.controller.js~dumpFolder",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/services/dump/dump.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "zipDest",
    "memberof": "src/services/dump/dump.controller.js",
    "static": true,
    "longname": "src/services/dump/dump.controller.js~zipDest",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/services/dump/dump.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "downloadAllData",
    "memberof": "src/services/dump/dump.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/dump/dump.controller.js~downloadAllData",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/services/dump/dump.controller.js",
    "importStyle": "{downloadAllData}",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "clearAllData",
    "memberof": "src/services/dump/dump.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/dump/dump.controller.js~clearAllData",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/services/dump/dump.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "uploadData",
    "memberof": "src/services/dump/dump.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/dump/dump.controller.js~uploadData",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/services/dump/dump.controller.js",
    "importStyle": "{uploadData}",
    "description": null,
    "lineNumber": 183,
    "undocument": true
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "deleteAllData",
    "memberof": "src/services/dump/dump.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/dump/dump.controller.js~deleteAllData",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/services/dump/dump.controller.js",
    "importStyle": "{deleteAllData}",
    "description": null,
    "lineNumber": 274,
    "undocument": true
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "src/services/dump/index.js",
    "content": "export router from './dump.api';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/dump/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "src/services/html2img/html2img.api.js",
    "content": "\n\n/**\n * Plurishing-backend\n * =======\n * Html to image api\n */\n\nimport express from 'express';\n\nimport html2img from './html2img.controller';\n\nconst router = new express.Router();\n\nrouter.post('/', html2img);\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/html2img/html2img.api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "src/services/html2img/html2img.controller.js",
    "content": "import html2img from './html2img.service.js';\nimport {v4 as genId} from 'uuid';\nimport {readFile, remove} from 'fs-extra';\nimport {resolve} from 'path';\n\nconst temp = resolve(__dirname + '/../../../temp/');\n\nexport default function controller (req, res) {\n  const html = req.body.data;\n  const id = genId();\n  const filename = temp + '/' + id + '.jpg';\n  // convert to image\n  html2img(html, filename, err => {\n    if (err) {\n      return res.status(500).send(err);\n    }\n    // read file as base64\n    readFile(filename, 'base64')\n      // send file\n      .then(base64 => res.send(base64))\n      // remove temp file\n      .then(() => remove(filename));\n  });\n}\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/html2img/html2img.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "temp",
    "memberof": "src/services/html2img/html2img.controller.js",
    "static": true,
    "longname": "src/services/html2img/html2img.controller.js~temp",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/services/html2img/html2img.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "controller",
    "memberof": "src/services/html2img/html2img.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/html2img/html2img.controller.js~controller",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/services/html2img/html2img.controller.js",
    "importStyle": "controller",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/services/html2img/html2img.service.js",
    "content": "import webshot from 'webshot';\n\nexport default (html, path, callback) => {\n  webshot(html, path, {\n    siteType:'html',\n    windowSize: {\n      width: 900,\n      // height: 450\n      height: 50 // setting a mini height to have well formed images\n    },\n    shotSize: {\n      width: 'all',\n      height: 'all'\n    }\n  },\n  (err) => {\n    callback(err);\n  });\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/html2img/html2img.service.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "html2img",
    "memberof": "src/services/html2img/html2img.service.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/html2img/html2img.service.js~html2img",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/services/html2img/html2img.service.js",
    "importStyle": "html2img",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/services/html2img/index.js",
    "content": "export router from './html2img.api';\nexport service from './html2img.service';\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/services/html2img/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/utils/config.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Config utils\n */\nimport configMap from '../../config/config.map';\n\nconst constantify = str => str.replace(/([A-Z])/g, '_$1').toUpperCase();\n\n/**\n * Resolves config retrieval method according to mode ('development' or 'production')\n * Uses json file if in dev, env variables if in prod\n * @return {object} config\n */\nexport function getConfig () {\n  if (process.env.NODE_ENV !== 'production') {\n    return require('../../config/config.dev');/* eslint node/no-unpublished-require : 0 */\n  } else {\n    return configMap.reduce((result, key) => ({\n      ...result,\n      [key]: process.env[constantify(key)]\n    }), {});\n  }\n}\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/config.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "constantify",
    "memberof": "src/utils/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/config.js~constantify",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "getConfig",
    "memberof": "src/utils/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/config.js~getConfig",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/config.js",
    "importStyle": "{getConfig}",
    "description": "Resolves config retrieval method according to mode ('development' or 'production')\nUses json file if in dev, env variables if in prod",
    "lineNumber": 15,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "config"
    }
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/utils/couchdb.js",
    "content": "\n\n/**\n * Inserts a design document in a couchdb database\n * @param {object} doc\n * @param {object} db\n * @param {string} designName\n * @param {object} design\n * @return {Promise}\n */\nconst insertDesignDocument = (doc, db, designName, design) => {\n  let _rev;\n  if (doc) {\n    _rev = doc._rev;\n  }\n  return db.insertAsync({\n    _rev,\n    ...design\n  }, `_design/${designName}`);\n};\n\n/**\n * Adds a new design to a database\n * @param db {object} the nano-handled database\n * @param designName {string}\n */\nexport const addDesign = (db, designName, design) =>\n    db.getAsync(`_design/${designName}`)\n    // design document exists\n    .then(doc => insertDesignDocument(doc, db, designName, design))\n    // design document does not exist (we don't care about the error)\n    .catch(() => insertDesignDocument(undefined, db, designName, design));\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/couchdb.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "insertDesignDocument",
    "memberof": "src/utils/couchdb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/couchdb.js~insertDesignDocument",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/couchdb.js",
    "importStyle": null,
    "description": "Inserts a design document in a couchdb database",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "designName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "design",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "addDesign",
    "memberof": "src/utils/couchdb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/couchdb.js~addDesign",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/couchdb.js",
    "importStyle": "{addDesign}",
    "description": "Adds a new design to a database",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": "{object} the nano-handled database"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "designName",
        "description": "{string}"
      }
    ]
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/utils/crypto.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Crypto utils\n */\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\n\n/**\n * Encodes a string into a crypted hash\n * @param {str} pwd - the string to encoded\n * @return {Promise}\n */\nexport const hash = (pwd) => bcrypt.hash(pwd, saltRounds);\n\n/**\n * Checks whether string matches hash\n * @param {string} pwd\n * @param {string} hash\n * @return {Promise} - resolves with a boolean as parameter\n */\nexport const comparePwd = (pwd, hash) => bcrypt.compare(pwd, hash);\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/crypto.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "bcrypt",
    "memberof": "src/utils/crypto.js",
    "static": true,
    "longname": "src/utils/crypto.js~bcrypt",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/crypto.js",
    "importStyle": null,
    "description": "Plurishing-backend\n=======\nCrypto utils",
    "lineNumber": 6
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "saltRounds",
    "memberof": "src/utils/crypto.js",
    "static": true,
    "longname": "src/utils/crypto.js~saltRounds",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/crypto.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "hash",
    "memberof": "src/utils/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/crypto.js~hash",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/crypto.js",
    "importStyle": "{hash}",
    "description": "Encodes a string into a crypted hash",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "str"
        ],
        "spread": false,
        "optional": false,
        "name": "pwd",
        "description": "the string to encoded"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "comparePwd",
    "memberof": "src/utils/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/crypto.js~comparePwd",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/crypto.js",
    "importStyle": "{comparePwd}",
    "description": "Checks whether string matches hash",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pwd",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "resolves with a boolean as parameter"
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "src/utils/data.js",
    "content": "import {dal as compositionDal} from '../components/compositions';\nimport {dal as resourceDal} from '../components/resources';\nimport {dal as assetDal} from '../components/assets';\nimport {\n  readFile,\n  remove,\n  ensureDir,\n  writeFile\n} from 'fs-extra';\nimport {resolve as resolvePath} from 'path';\n\nconst assetsFolder = resolvePath(__dirname + '/../../assets');\nconst tempFolder = resolvePath(__dirname + '/../../temp');\nconst tempAssetsFolder = resolvePath(`${tempFolder}/assets`);\n\nexport const mountLocalAssets = assets =>\n  new Promise((resolve, reject) => {\n    // should return getAssetUri function ie : asset => `${tempDirPath}/${asset._id}/${asset.filename}`\n    return remove(tempAssetsFolder)\n            .then(() => ensureDir(tempAssetsFolder))\n            .then(() => {\n              const toResolve = assets.map(asset => {\n                return ensureDir(`${tempAssetsFolder}/${asset._id}`)\n                  .then(() => {\n                    return assetDal\n                        .getAssetAttachment({id: asset._id, filename: asset.filename});\n                  })\n                  .then(({data}) => {\n                    return writeFile(`${tempAssetsFolder}/${asset._id}/${asset.filename}`, data);\n                  });\n              });\n              return Promise.all(toResolve);\n            })\n            .then(() => {\n              const getAssetUri = asset => `${tempAssetsFolder}/${asset._id}/${asset.filename}`;\n              resolve(getAssetUri);\n            })\n            .catch(reject);\n  });\n\nexport const unmountLocalAssets = (/*assets*/) =>\n  new Promise((resolve, reject) => {\n    // removing all assets\n    return remove(tempAssetsFolder).then(resolve).catch(reject);\n    // targeting only specific assets\n    // const toResolve = assets.map(asset => {\n    //   const folder = `${tempAssetsFolder}/${asset._id}`;\n    //   return remove(folder)\n    // });\n    // return Promise.all(toResolve)\n  });\n\nexport const fetchCitationData = () =>\n  new Promise((resolve, reject) => {\n    let citationStyle;\n    let citationLocale;\n    readFile(`${assetsFolder}/apa.csl`, 'utf8')\n          .then(str => {\n            citationStyle = str;\n            return readFile(`${assetsFolder}/english-locale.xml`, 'utf8');\n          })\n          .then(str => {\n            citationLocale = str;\n            resolve({citationStyle, citationLocale});\n          })\n          .catch(reject);\n  });\n\nexport const fetchMontageDependencies = (montage) => {\n  return new Promise((resolve, reject) => {\n    let compositions;\n    let resources;\n    let assets;\n    // register compositions\n    const compositionsRequirements = montage.data.compositions\n            .map(target => target.target_composition_id)\n            .filter(id => id)\n            .map(id => compositionDal.getComposition({id}));\n    Promise.all(compositionsRequirements)\n      .then(theseCompositions => {\n        compositions = theseCompositions;\n\n        // register resources requirement\n        const resourcesRequirements = compositions.reduce((result, composition) => {\n          return result.concat(composition.resources || []);\n        }, [])\n        .filter(id => id)\n        .map(id => resourceDal.getResource({id}));\n\n        Promise.all(resourcesRequirements)\n          .then(theseResources => {\n            resources = theseResources;\n            const assetsRequirements = resources.reduce((result, resource) => {\n              const assetKeys = Object.keys(resource.data).filter(key => key.indexOf('asset_id') > -1);\n              const assetMentions = assetKeys.map(key =>\n                resource.data[key]);/* eslint security/detect-object-injection : 0 */\n              return result.concat(assetMentions || []);\n            }, [])\n            .filter(id => id)\n            .map(id => assetDal.getAsset({id}));\n\n            Promise.all(assetsRequirements)\n              .then(theseAssets => {\n                assets = theseAssets;\n\n                resolve({\n                  montage,\n                  compositions: compositions,\n                  resources: resources,\n                  assets: assets\n                  // compositions: mapify(compositions, '_id'),\n                  // resources: mapify(resources, '_id'),\n                  // assets: mapify(assets, '_id')\n                });\n              })\n              .catch(reject);\n          }).catch(reject);\n      }).catch(reject);\n  });\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/data.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "assetsFolder",
    "memberof": "src/utils/data.js",
    "static": true,
    "longname": "src/utils/data.js~assetsFolder",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "tempFolder",
    "memberof": "src/utils/data.js",
    "static": true,
    "longname": "src/utils/data.js~tempFolder",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "tempAssetsFolder",
    "memberof": "src/utils/data.js",
    "static": true,
    "longname": "src/utils/data.js~tempAssetsFolder",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "mountLocalAssets",
    "memberof": "src/utils/data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/data.js~mountLocalAssets",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/data.js",
    "importStyle": "{mountLocalAssets}",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "unmountLocalAssets",
    "memberof": "src/utils/data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/data.js~unmountLocalAssets",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/data.js",
    "importStyle": "{unmountLocalAssets}",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "fetchCitationData",
    "memberof": "src/utils/data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/data.js~fetchCitationData",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/data.js",
    "importStyle": "{fetchCitationData}",
    "description": null,
    "lineNumber": 53,
    "undocument": true
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "fetchMontageDependencies",
    "memberof": "src/utils/data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/data.js~fetchMontageDependencies",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/data.js",
    "importStyle": "{fetchMontageDependencies}",
    "description": null,
    "lineNumber": 69,
    "undocument": true
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "src/utils/emails.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Mailing utils\n */\n\n\nexport const welcomeEmail = (appUrl, user) => ({\n  subject: 'Plurishing - Bienvenue !',\n  html: `\n<h1>Plurishing - bienvenue !</h1>\n<p>\n  Vous avez été ajouté à la liste des utilisateurs de l'application Plurishing. Si vous souhaitez participer,\n  <a\n    href=\"${appUrl}/signup/${user._id}/${user.resetPasswordToken}\"\n  >\n    visitez cette adresse pour y entrer un nouveau mot de passe\n  </a> d'ici 24 heures.\n</p>`\n});\n\nexport const resetPwdEmail = (appUrl, user) => ({\n  subject: 'Plurishing - réinitialisation de votre mot de passe',\n  html: `\n<h1>Plurishing - réinitialisation du mot de passe</h1>\n<p>\n  Vous avez fait une demande de réinitialisation de votre mot de passe pour l'application Plurishing. <a\n    href=\"${appUrl}/signup/${user._id}/${user.resetPasswordToken}\">\n    Visitez cette adresse pour y entrer un nouveau mot de passe\n  </a> d'ici 24 heures.\n</p>`\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/emails.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "welcomeEmail",
    "memberof": "src/utils/emails.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/emails.js~welcomeEmail",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/emails.js",
    "importStyle": "{welcomeEmail}",
    "description": "Plurishing-backend\n=======\nMailing utils",
    "lineNumber": 8
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "resetPwdEmail",
    "memberof": "src/utils/emails.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/emails.js~resetPwdEmail",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/emails.js",
    "importStyle": "{resetPwdEmail}",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "src/utils/errorHandler.js",
    "content": "/**\n * Some utils for managing errors in the right way\n * Taken from the repertory of good practices https://github.com/i0natan/nodebestpractices/\n */\n\n/**\n * Catch unhandled promise rejections\n */\nprocess.on('unhandledRejection', function (reason) {\n  //I just caught an unhandled promise rejection,\n  // since we already have fallback handler for unhandled errors (see below),\n  // let throw and let him handle that\n  throw reason;\n});\n\n/**\n * Catch unhandled exceptions to shut the process gracefully\n */\nprocess.on('uncaughtException', function(error) {\n// process.on('uncaughtException', function(error) {\n   // @todo setup error types system\n   // errorManagement.handler.handleError(error);\n   // if(!errorManagement.handler.isTrustedError(error))\n   throw error;\n});\n\n/**\n * Custom error handling object\n * to be used in a middleware in order to catch all errors\n * and process them here (save them, send a mail to admin, ...)\n */\n// const sendMailToAdminIfCritical = (logger, err) => logger.debug('send email to admin if critical');\n\n// const saveInOpsQueueIfCritical = (logger, err) => logger.debug('saveInOpsQueueIfCritical');\n\nconst determineIfOperationalError = () => false;\n\nexport default function errorHandler(logger){\n    this.handleError = function (error) {\n        return new Promise(resolve => {\n          logger.error(error);\n          // sendMailToAdminIfCritical(logger, error)\n          // saveInOpsQueueIfCritical(logger, error)\n          resolve(determineIfOperationalError(error));\n        });\n    };\n  }\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/errorHandler.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "determineIfOperationalError",
    "memberof": "src/utils/errorHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/errorHandler.js~determineIfOperationalError",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/errorHandler.js",
    "importStyle": null,
    "description": "Custom error handling object\nto be used in a middleware in order to catch all errors\nand process them here (save them, send a mail to admin, ...)",
    "lineNumber": 36
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "errorHandler",
    "memberof": "src/utils/errorHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/errorHandler.js~errorHandler",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/errorHandler.js",
    "importStyle": "errorHandler",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/utils/mailer.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Mailer utils\n */\nimport nodemailer from 'nodemailer';\n\n/**\n * Sends an email\n * @param {object} data - the data of the email\n * @param {object} config - the config to use\n */\nexport default function sendEmail ({\n  // from = '\"Fred Foo 👻\" <foo@blurdybloop.com>',\n  to = [],\n  subject = 'Hello ✔',\n  html = '<b>Hello world?</b>'\n}, {\n  smtpEmail,\n  smtpService,\n  smtpPassword\n}, logger) {\n  return new Promise((resolve, reject) => {\n    // create reusable transporter object using the default SMTP transport\n    let transporter;\n    if (smtpService === 'Gmail') {\n      const smtp = `smtps://${encodeURIComponent(smtpEmail)}:${encodeURIComponent(smtpPassword)}@smtp.gmail.com:465`;\n      transporter = nodemailer.createTransport(smtp);\n    } else {\n      transporter = nodemailer.createTransport('SMTP', {\n        service: smtpService,\n        auth: {\n          user: smtpEmail,\n          pass: smtpPassword\n        }\n      });\n    }\n\n    // setup email data\n    let mailOptions = {\n      from: smtpEmail, // sender address\n      to: to.join(', '), // list of receivers\n      subject, // Subject line\n      html // html body\n    };\n\n    // send mail with defined transport object\n    transporter.sendMail(mailOptions, (error, info) => {\n      if (error) {\n        reject(error);\n        return logger.error(error);\n      }\n      // logger.debug('Message sent: %s', info.messageId);\n      // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@blurdybloop.com>\n      // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\n      // return resolve(nodemailer.getTestMessageUrl(info));\n      return resolve(info);\n    });\n  });\n}\n\n\n/**\n * Simulate email sending with ethereal\n */\n// export function sendTestEmail ({\n//   from = '\"Fred Foo 👻\" <foo@blurdybloop.com>',\n//   to = [],\n//   subject = 'Hello ✔',\n//   html = '<b>Hello world?</b>'\n// }, {\n//   smtpHost = 'smtp.ethereal.email',\n//   smtpPort = 587\n//   // smtpEmail,\n//   // smtpService,\n//   // smtpPassword,\n// }, logger) {\n//   return new Promise((resolve, reject) => {\n//     // Generate test SMTP service account from ethereal.email\n//     // Only needed if you don't have a real mail account for testing\n//     nodemailer.createTestAccount((err, account) => {\n//       if (err) {\n//         return reject(err);\n//       }\n//       // create reusable transporter object using the default SMTP transport\n//       let transporter = nodemailer.createTransport({\n//         host: smtpHost,\n//         port: smtpPort,\n//         secure: false, // true for 465, false for other ports\n//         auth: {\n//           user: account.user, // generated ethereal user\n//           pass: account.pass // generated ethereal password\n//         }\n//       });\n\n//       // setup email data with unicode symbols\n//       let mailOptions = {\n//         from, // sender address\n//         to: to.join(', '), // list of receivers\n//         subject, // Subject line\n//         html // html body\n//       };\n\n//       // send mail with defined transport object\n//       transporter.sendMail(mailOptions, (error, info) => {\n//         if (error) {\n//           reject(error);\n//           return logger.error(error);\n//         }\n//         logger.debug('Message sent: %s', info.messageId);\n//         // Preview only available when sending through an Ethereal account\n\n//         // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@blurdybloop.com>\n//         // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\n//         resolve(nodemailer.getTestMessageUrl(info));\n//       });\n//     });\n//   });\n// }\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/mailer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "sendEmail",
    "memberof": "src/utils/mailer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/mailer.js~sendEmail",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/mailer.js",
    "importStyle": "sendEmail",
    "description": "Sends an email",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the data of the email"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "the config to use"
      }
    ]
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/utils/middlewares.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Custom middlewares for express\n */\nimport errorHandlerObj from './errorHandler';\n\nexport const errorHandler = (err, req, res, next) => {\n  const handler = new errorHandlerObj(req.log);\n  handler.handleError(err).then((isOperationalError) => {\n      if (!isOperationalError) {\n          next(err);\n      } else {\n        throw new Error(err);\n      }\n  });\n};\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/middlewares.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "errorHandler",
    "memberof": "src/utils/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/middlewares.js~errorHandler",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/middlewares.js",
    "importStyle": "{errorHandler}",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/utils/plugDb.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Couchdb connection script\n */\nconst Promise = require('bluebird');\n\n\nconst config = require('./config').getConfig();\n\n/**\n * Init nano\n */\nconst nano = require('nano')(config.couchdbUri);\n\n/**\n * Specify db name\n */\nvar db = nano.db.use(config.couchdbName);\n\n/**\n * Promisify\n */\nPromise.promisifyAll(db);\n\nexport default db;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/plugDb.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "Promise",
    "memberof": "src/utils/plugDb.js",
    "static": true,
    "longname": "src/utils/plugDb.js~Promise",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/plugDb.js",
    "importStyle": null,
    "description": "Plurishing-backend\n=======\nCouchdb connection script",
    "lineNumber": 6
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "config",
    "memberof": "src/utils/plugDb.js",
    "static": true,
    "longname": "src/utils/plugDb.js~config",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/plugDb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "nano",
    "memberof": "src/utils/plugDb.js",
    "static": true,
    "longname": "src/utils/plugDb.js~nano",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/plugDb.js",
    "importStyle": null,
    "description": "Init nano",
    "lineNumber": 14
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "name": "db",
    "memberof": "src/utils/plugDb.js",
    "static": true,
    "longname": "src/utils/plugDb.js~db",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/plugDb.js",
    "importStyle": "db",
    "description": "Specify db name",
    "lineNumber": 19
  },
  {
    "__docId__": 241,
    "kind": "file",
    "name": "src/utils/populateDb.js",
    "content": "/**\n * Plurishing-backend\n * =======\n * Server population script\n */\n/* eslint no-console : 0 */\nimport {hash} from './crypto';\n\nimport db from './plugDb';\n\nimport {getConfig} from './config';\nconst {adminPassword, adminEmail} = getConfig();\n\n// admin object\nconst admin = {\n  type: 'user',\n  name: 'admin',\n  password: adminPassword,\n  admin: true,\n  email: adminEmail\n};\n\nconst addAdmin = doc => {\n  let _rev;\n  if (doc) {\n    _rev = doc._rev;\n  }\n  hash(admin.password)\n  .then(password =>\n    db.insertAsync({\n      ...admin,\n      _rev,\n      password\n    }, 'admin')\n  )\n  .then(info => {\n    console.info('created admin', info);\n  })\n  .catch(error => {\n    console.info('error while creating admin', error);\n  });\n};\n\n// create or update admin\ndb.getAsync('admin')\n  .then(addAdmin)\n  .catch(addAdmin);\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/populateDb.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "adminPassword",
    "memberof": "src/utils/populateDb.js",
    "static": true,
    "longname": "src/utils/populateDb.js~adminPassword",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/populateDb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "admin",
    "memberof": "src/utils/populateDb.js",
    "static": true,
    "longname": "src/utils/populateDb.js~admin",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/populateDb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "addAdmin",
    "memberof": "src/utils/populateDb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/populateDb.js~addAdmin",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/populateDb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "src/utils/schemas.js",
    "content": "import Ajv from 'ajv';\nconst ajv = new Ajv();\n\nexport const dataIsValid = (data, schema) =>\n  new Promise((resolve, reject) => {\n    const valid = ajv.validate(schema, data);\n    if (valid) {\n      resolve(data);\n    } else {\n      reject(ajv.errors);\n    }\n  });\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/schemas.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "variable",
    "name": "ajv",
    "memberof": "src/utils/schemas.js",
    "static": true,
    "longname": "src/utils/schemas.js~ajv",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/schemas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "dataIsValid",
    "memberof": "src/utils/schemas.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/schemas.js~dataIsValid",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/schemas.js",
    "importStyle": "{dataIsValid}",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "src/utils/transformJSON.js",
    "content": "/**\n * Multimodal Publishing utils\n * ===========================\n * transformJSON\n * ===========================\n * This module resolves a data object by transforming it\n * from an input schema to an output schema using\n * a transformation function.\n * @module mpu/helpers/transformJSON\n */\nimport Ajv from 'ajv';\nconst ajv = new Ajv();\n\n/**\n * Retrieves the arguments name of a function\n * @param {function} func - the function to analyse\n * @return {array} arguments - the arguments names\n */\nfunction $args(func) {\n    return (func + '')\n      .replace(/[/][/].*$/mg,'') // strip single-line comments\n      .replace(/\\s+/g, '') // strip white space\n      .replace(/[/][*][^/*]*[*][/]/g, '') // strip multi-line comments\n      .split('){', 1)[0].replace(/^[^(]*[(]/, '') // extract the parameters\n      .replace(/=[^,]+/g, '') // strip any ES6 defaults\n      .split(',').filter(Boolean); // split & filter [\"\"]\n}\n\n/**\n * @param {object|Array} inputData - the original data to convert\n * @param {object} inputSchema - the schema of original data to convert in json-schema\n * @param {object} outputSchema - the schema of the resulting data to convert in json-schema\n * @param {function} transformFunction - a function taking data as argument and returning new data\n * This transform function can :\n * - return a json object resolving with a json object\n * - return a promise resolving with a json object\n * - provide a node-js style callback as second argument\n * @return {Promise} promise\n */\nconst transformJSON = (\n    inputData,\n    inputSchema,\n    outputSchema,\n    transformFunction,\n) =>\n    new Promise(\n        (resolve, reject) => {\n          try{\n            // verify input is valid\n            const inputIsValid = ajv.validate(inputSchema, inputData);\n            if (!inputIsValid) {\n              return reject(ajv.errors);\n            }\n            // check if transform function presents a callback\n            if ($args(transformFunction).length > 1) {\n              // resolve with callback\n              return transformFunction(inputData, (err, output) => {\n                if (err) {\n                  return reject(err);\n                } else {\n                  // apply transform function to input\n                  const outputIsValid = ajv.validate(outputSchema, output);\n                  if (!outputIsValid) {\n                    reject(ajv.errors);\n                  } else {\n                    resolve(output);\n                  }\n                }\n              });\n            }\n            // apply transform function to input\n            const outputTemp = transformFunction(inputData);\n            // if the function has returned a promise resolve it\n            if (outputTemp instanceof Promise) {\n              outputTemp\n                .then(output => {\n                  // verify that output complies to output schema\n                  const outputIsValid = ajv.validate(outputSchema, output);\n                  if (outputIsValid) {\n                    resolve(output);\n                  } else {\n                    // @todo normalize error response\n                    reject(new Error());\n                  }\n                })\n                .catch(e => {\n                  reject(e);\n                });\n            } else {\n              // verify output complies to output schema\n              const outputIsValid = ajv.validate(outputSchema, outputTemp);\n              if (outputIsValid) {\n                resolve(outputTemp);\n              } else {\n                // @todo normalize error response\n                reject(new Error());\n              }\n            }\n          } catch(e) {\n            reject(e);\n          }\n        }\n    );\n\nexport default transformJSON;\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/transformJSON.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "ajv",
    "memberof": "src/utils/transformJSON.js",
    "static": true,
    "longname": "src/utils/transformJSON.js~ajv",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/transformJSON.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "$args",
    "memberof": "src/utils/transformJSON.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/transformJSON.js~$args",
    "access": null,
    "export": false,
    "importPath": "plurishing-backend/src/utils/transformJSON.js",
    "importStyle": null,
    "description": "Retrieves the arguments name of a function",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "the function to analyse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "arguments - the arguments names"
    }
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "transformJSON",
    "memberof": "src/utils/transformJSON.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/transformJSON.js~transformJSON",
    "access": null,
    "export": true,
    "importPath": "plurishing-backend/src/utils/transformJSON.js",
    "importStyle": "transformJSON",
    "description": "",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputData",
        "description": "the original data to convert"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputSchema",
        "description": "the schema of original data to convert in json-schema"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "outputSchema",
        "description": "the schema of the resulting data to convert in json-schema"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "transformFunction",
        "description": "a function taking data as argument and returning new data\nThis transform function can :\n- return a json object resolving with a json object\n- return a promise resolving with a json object\n- provide a node-js style callback as second argument"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise"
    }
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "src/utils/transformJSON.spec.js",
    "content": "import {expect} from 'chai';\nimport {describe, it} from 'mocha';\n\n// tested function\nimport transformJSON from './transformJSON';\n\ndescribe('transformJSON util', () => {\n\n  // mock data\n  const inputData = {\n    foo: 'hello'\n  };\n  const expectedOutput = {\n    bar: 'hello'\n  };\n\n  // input json schema\n  const inputSchema = {\n    properties: {\n      foo: {\n        type: 'string'\n      }\n    },\n    required: ['foo']\n  };\n\n  // output json schema\n  const outputSchema = {\n    properties: {\n      bar: {\n        type: 'string'\n      }\n    },\n    required: ['bar']\n  };\n\n  // transform function\n  const transform = input => {\n    const output = {...input};\n    const bar = input.foo;\n    delete output.foo;\n    output.bar = bar;\n    return output;\n  };\n  // transform function as a promise\n  const transformAsPromise = input =>\n    new Promise((resolve) => {\n      const output = transform(input);\n      resolve(output);\n    });\n\n  // transform function with callback\n  const transformWithCallback = (input, callback) => {\n    const output = transform(input);\n    callback(null, output);\n  };\n\n  it('should return a promise', done => {\n    const fn = transformJSON(inputData, inputSchema, outputSchema, transform);\n    expect(fn).to.be.an.instanceof(Promise);\n    done();\n  });\n  it('should apply the transform function to input data and resolve with correctly transformed data', done => {\n    transformJSON(inputData, inputSchema, outputSchema, transform)\n      .then(output => {\n        expect(output).to.deep.equal(expectedOutput);\n        done();\n      })\n      .catch();\n  });\n  it('should accept a transform function returning a promise', done => {\n    transformJSON(inputData, inputSchema, outputSchema, transformAsPromise)\n      .then(output => {\n        expect(output).to.deep.equal(expectedOutput);\n        done();\n      })\n      .catch();\n  });\n\n  it('should accept a transform function presenting a callback', done => {\n    transformJSON(inputData, inputSchema, outputSchema, transformWithCallback)\n      .then(output => {\n        expect(output).to.deep.equal(expectedOutput);\n        done();\n      })\n      .catch();\n  });\n\n  it('should require inputData parameter to be a js object', done => {\n    transformJSON(undefined, inputSchema, outputSchema, transform)\n      .catch(e => {\n        expect(e).to.be.an('error');\n        done();\n      });\n  });\n\n  it('should require inputSchema parameter to be a valid json schema', done => {\n    transformJSON(inputData, undefined, outputSchema, transform)\n      .catch(e => {\n        expect(e).to.be.an('error');\n        done();\n      });\n  });\n\n  it('should require outputSchema parameter to be a valid json schema', done => {\n    transformJSON(inputData, inputSchema, undefined, transform)\n      .catch(e => {\n        expect(e).to.be.an('error');\n        done();\n      });\n  });\n\n  it('should reject an input data not complying to input json schema', done => {\n    transformJSON({bar: 'hello'}, inputSchema, outputSchema, transform)\n      .catch(e => {\n        expect(e).to.be.an('array');\n        done();\n      });\n  });\n\n  it('should reject an output data not complying to output json schema', done => {\n    const wrongTransform = input => input;\n    transformJSON({bar: 'hello'}, inputSchema, outputSchema, wrongTransform)\n      .catch(e => {\n        expect(e).to.be.an('array');\n        done();\n      });\n  });\n\n});\n",
    "static": true,
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/src/utils/transformJSON.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "Plurishing-server\n===\n\n\n\n\n# Scripts\n\n```\n# run in dev mode (dev config, hot reloading)\nnpm run dev\n\n# run in prod mod\nnpm run start\n\n# monitor processes and error in prod mode (with pm2)\nnpm run monitor\n\n# lint code\nnpm run lint\n\n# lint code while applying autofixes\nnpm run lint:fix\n\n# bootstrap admin user (dev mode)\nnpm run populate-db:dev\n\n# bootstrap admin user (prod mode)\nnpm run populate-db\n\n# run tests with mocha\nnpm run test\n\n# run tests with mocha and rerun when source is modified\nnpm run test:watch\n\n# check test coverage\nnpm run cov\n\n# build automated documentation with esdoc\nnpm run doc\n\n# build code for production (with babel)\nnpm run build\n\n# deploy to heroku (push and set env variables)\nnpm run deploy:heroku\n```\n\n# Development\n\nInstall couchdb and run it locally :\n\n```\nbrew services start couchdb\n```\n\n# DB backup and restore\n\nBackup:\n```\nbash couchdb-backup.sh -b -H 127.0.0.1 -d my-db -f dumpedDB.json -u admin -p password\n```\n\n\nRestore:\n```\nbash couchdb-backup.sh -r -H 127.0.0.1 -d my-db -f dumpedDB.json -u admin -p password\n```\n\n\n```\nUsage: ./couchdb-backup.sh [-b|-r] -H <COUCHDB_HOST> -d <DB_NAME> -f <BACKUP_FILE> [-u <username>] [-p <password>] [-P <port>] [-l <lines>] [-t <threads>] [-a <import_attempts>]\n  -b   Run script in BACKUP mode.\n  -r   Run script in RESTORE mode.\n  -H   CouchDB Hostname or IP. Can be provided with or without 'http(s)://'\n  -d   CouchDB Database name to backup/restore.\n  -f   File to Backup-to/Restore-from.\n  -P   Provide a port number for CouchDB [Default: 5984]\n  -u   Provide a username for auth against CouchDB [Default: blank]\n         -- can also set with 'COUCHDB_USER' environment var\n  -p   Provide a password for auth against CouchDB [Default: blank]\n         -- can also set with 'COUCHDB_PASS' environment var\n  -l   Number of lines (documents) to Restore at a time. [Default: 5000] (Restore Only)\n  -t   Number of CPU threads to use when parsing data [Default: nProcs-1] (Backup Only)\n  -a   Number of times to Attempt import before failing [Default: 3] (Restore Only)\n  -c   Create DB on demand, if they are not listed.\n  -q   Run in quiet mode. Suppress output, except for errors and warnings.\n  -z   Compress output file (Backup Only)\n  -T   Add datetime stamp to output file name (Backup Only)\n  -V   Display version information.\n  -h   Display usage information.\n\nExample: ./couchdb-backup.sh -b -H 127.0.0.1 -d mydb -f dumpedDB.json -u admin -p password\n```\n\n\nSee https://github.com/danielebailo/couchdb-dump for more information.\n",
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"plurishing-backend\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Backend handling multimodal publishing\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/robindemourat/plurishing-backend.git\"\n  },\n  \"author\": \"Robin de Mourat <robin.demourat@gmail.com> (https://github.com/robindemourat)\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/robindemourat/plurishing-backend/issues\"\n  },\n  \"homepage\": \"https://github.com/robindemourat/plurishing-backend#readme\",\n  \"engines\": {\n    \"node\": \">=9.2.0\"\n  },\n  \"scripts\": {\n    \"dev\": \"better-npm-run dev\",\n    \"start\": \"pm2 start ecosystem.config.js -i max --attach\",\n    \"monitor\": \"pm2 monit\",\n    \"lint\": \"eslint src tests server\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"populate-db\": \"better-npm-run populate-db\",\n    \"populate-db:dev\": \"better-npm-run populate-db-dev\",\n    \"test\": \"cross-env NODE_ENV=test mocha --compilers js:babel-core/register --R  spec --recursive $(find src -name '*.spec.js')\",\n    \"test:watch\": \"npm run test -- --watch\",\n    \"cov\": \"cross-env NODE_ENV=test nyc npm test && nyc check-coverage --lines 0 --functions 0 --branches 0n && nyc report --reporter=text-lcov\",\n    \"doc\": \"esdoc -c esdoc.json\",\n    \"build\": \"babel src/ -d build/\",\n    \"add-build-to-stage\": \"git add build\",\n    \"add-doc-to-stage\": \"git add doc\",\n    \"deploy:heroku\": \"node setHerokuEnv;git push heroku master\"\n  },\n  \"betterScripts\": {\n    \"dev\": {\n      \"command\": \"nodemon src/server.js  --exec babel-node --config nodemon.json\",\n      \"env\": {\n        \"DEBUG\": \"app:*\",\n        \"NODE_ENV\": \"development\"\n      }\n    },\n    \"populate-db\": {\n      \"command\": \"node build/utils/populateDb.js\",\n      \"env\": {\n        \"DEBUG\": \"app:*\",\n        \"NODE_ENV\": \"maintenance\"\n      }\n    },\n    \"populate-db-dev\": {\n      \"command\": \"babel-node src/utils/populateDb.js\",\n      \"env\": {\n        \"DEBUG\": \"app:*\",\n        \"NODE_ENV\": \"development\"\n      }\n    }\n  },\n  \"pre-commit\": [\n    \"lint\",\n    \"cov\",\n    \"build\",\n    \"doc\",\n    \"add-doc-to-stage\",\n    \"add-build-to-stage\"\n  ],\n  \"dependencies\": {\n    \"ajv\": \"^5.5.2\",\n    \"archiver\": \"^2.1.1\",\n    \"axios\": \"^0.17.1\",\n    \"babel-runtime\": \"^6.3.19\",\n    \"bcrypt\": \"^1.0.3\",\n    \"better-npm-run\": \"0.0.9\",\n    \"bluebird\": \"^3.5.1\",\n    \"bunyan-debug-stream\": \"^1.0.8\",\n    \"cors\": \"^2.8.1\",\n    \"debug\": \"^2.2.0\",\n    \"epub-gen\": \"0.0.17\",\n    \"express\": \"^4.14.0\",\n    \"express-bunyan-logger\": \"^1.3.2\",\n    \"express-promise\": \"^0.4.0\",\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\n    \"fb\": \"^2.0.0\",\n    \"formidable\": \"^1.1.1\",\n    \"fs-extra\": \"^5.0.0\",\n    \"json-schema-defaults\": \"^0.3.0\",\n    \"json-schema-ref-parser\": \"^4.0.4\",\n    \"jsonwebtoken\": \"^8.1.0\",\n    \"lodash\": \"^4.16.1\",\n    \"lodash-addons\": \"^0.3.1\",\n    \"mime-types\": \"^2.1.17\",\n    \"nano\": \"^6.4.2\",\n    \"nodemailer\": \"^4.4.1\",\n    \"plurishing-schemas\": \"git+https://github.com/robindemourat/plurishing-schemas.git\",\n    \"plurishing-shared\": \"git+https://github.com/robindemourat/plurishing-shared.git\",\n    \"pm2\": \"^2.8.0\",\n    \"prince\": \"^1.4.7\",\n    \"react\": \"^16.2.0\",\n    \"react-citeproc\": \"^0.1.9\",\n    \"react-dom\": \"^16.2.0\",\n    \"twit\": \"^2.2.9\",\n    \"unzipper\": \"^0.8.11\",\n    \"uuid\": \"^3.1.0\",\n    \"webshot\": \"^0.18.0\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.5.1\",\n    \"babel-core\": \"^6.3.17\",\n    \"babel-eslint\": \"^6.0.0-beta.6\",\n    \"babel-loader\": \"^6.2.0\",\n    \"babel-plugin-istanbul\": \"^4.1.1\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n    \"babel-plugin-transform-decorators\": \"^6.24.1\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-plugin-transform-runtime\": \"^6.3.13\",\n    \"babel-polyfill\": \"^6.9.0\",\n    \"babel-preset-es2015\": \"^6.3.13\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"babel-preset-stage-0\": \"^6.3.13\",\n    \"babel-register\": \"^6.3.13\",\n    \"chai\": \"^3.4.1\",\n    \"coveralls\": \"^3.0.0\",\n    \"cross-env\": \"^5.1.1\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-publish-markdown-plugin\": \"^1.0.0\",\n    \"eslint\": \"^2.13.1\",\n    \"eslint-config-standard\": \"^5.1.0\",\n    \"eslint-plugin-babel\": \"^3.3.0\",\n    \"eslint-plugin-mocha\": \"^4.11.0\",\n    \"eslint-plugin-node\": \"^5.2.1\",\n    \"eslint-plugin-promise\": \"^1.0.8\",\n    \"eslint-plugin-security\": \"^1.4.0\",\n    \"eslint-plugin-standard\": \"^1.3.1\",\n    \"istanbul\": \"^0.4.5\",\n    \"mocha\": \"^2.2.5\",\n    \"nodemon\": \"^1.8.1\",\n    \"nyc\": \"^11.2.1\",\n    \"pre-commit\": \"^1.2.2\",\n    \"webpack\": \"^1.12.14\"\n  }\n}\n",
    "longname": "/Users/rawbin/Documents/Projets/collaborations/ensad-publishing/prototype/plurishing-backend/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]